
KiCad Netlist to SKiDL Converter Code Collection

This combined output contains all implementation files for the KiCad-to-SKiDL converter tool, preserving the exact 1:1 mapping between KiCad schematics and generated Python code as outlined in PLANNING_DOC.md.

File Overview:

1. PLANNING_DOC.md - Core design document specifying:
   - 1:1 schematic/code correspondence
   - Net naming conversion rules
   - Hierarchical preservation requirements
   - Component handling specifications

2. netlist_to_skidl.py - Main conversion script implementing:
   - KiCad netlist parsing (using kinparse)
   - Hierarchical sheet structure preservation
   - Python-safe net name conversion
   - Exact component replication with properties

3. Generated Circuit Modules (auto-generated by converter):
   - _3v3_regulator.py: Voltage regulation subcircuit
   - resistor_divider.py: Resistive voltage divider implementation
   - esp32s3mini1.py: ESP32-S3-MINI-1 module interface
   - USB.py: USB connector and interface circuitry
   - main.py: listed below

4. report.txt: Kicad PCB import logs trying to import main.net

Key Implementation Details:
- Strict 1:1 mapping between KiCad sheets and Python modules
- All nets explicitly passed through hierarchy
- Original component references preserved (C10, R9, etc)
- No automatic optimization - exact topology maintained
- Generated code matches KiCad structure at all levels

Note: main.py files are excluded from this collection to prevent accidental inclusion of multiple entry points. The converter generates standalone modules that can be imported into a top-level circuit design.

Here is main.py:

# -*- coding: utf-8 -*-
from skidl import *
from esp32s3mini1 import esp32s3mini1
from _3v3_regulator import _3v3_regulator
from resistor_divider1 import resistor_divider1
from USB import USB

def main():
    # Create nets
    _p_3V3 = Net('+3V3')
    _p_5V = Net('+5V')
    _3v3_monitor = Net('3v3_monitor')
    _5v_monitor = Net('5v_monitor')
    D_p = Net('D+')
    D_n = Net('D-')
    esp32s3mini1_HW_VER = Net('esp32s3mini1/HW_VER')
    GND = Net('GND')

    # Create subcircuits
    resistor_divider1(_p_3V3, esp32s3mini1_HW_VER, GND)
    esp32s3mini1(_p_3V3, _3v3_monitor, _5v_monitor, D_p, D_n, esp32s3mini1_HW_VER, GND)
    _3v3_regulator(_p_3V3, _p_5V, _3v3_monitor, _5v_monitor, GND)
    USB(_p_5V, D_p, D_n, GND)

if __name__ == "__main__":
    main()
    generate_netlist()


______

TODO:
- Help me figure out why report.txt has so many inconsistencies.  There should be no changes.




/* Begin of file: PLANNING_DOC.md */
# KiCad Netlist to SKiDL Converter Design Document

## Current Issues and Bugs

### 1. Component Reference Mismatch
- **Bug**: In esp32s3mini1.py, components are defined with sheet prefixes (esp32s3mini1_C1) but referenced without prefixes (C1)
- **Error**: NameError: name 'C1' is not defined
- **Example**:
  ```python
  # Defined as:
  esp32s3mini1_C1 = Part('Device', 'C', value='10uF')
  
  # But referenced as:
  _3V3 += C1['1']  # Should be esp32s3mini1_C1['1']
  ```

### 2. Net Name Inconsistencies
- **Bug**: Net names are being inconsistently converted between files
- **Example**:
  - In main.py: `_D_ = Net('_D_')`
  - In esp32s3mini1.py: `_D_ += U3['24']`
  - In USB.py: `D_n = Net('D_n')`
  
### 3. Hierarchical Net Passing
- **Bug**: Nets aren't being properly passed through hierarchy
- **Example**:
  - Main defines `_D_` but USB.py expects `D_n` and `D_p`
  - No clear mapping between hierarchical net names

### 4. Duplicate GND Nets
- **Bug**: Multiple GND nets being created unnecessarily
- **Example**:
  ```python
  # In main.py
  gnd = Net('GND')
  GND = Net('GND')  # Duplicate
  ```

### 5. Missing Net Connections
- **Bug**: Some nets from KiCad aren't appearing in SKiDL output
- **Example**:
  - KiCad net "/esp32s3mini1/EN" missing from output
  - KiCad net "Net-(P1-CC)" converted to "Net_n_P1_nCC_" but not properly connected

## Desired Behavior

1. **Component References**:
   - Use consistent component references matching KiCad refdes
   - Example: C1 should be C1 everywhere, not esp32s3mini1_C1

2. **Net Naming**:
   - Consistent net name conversion across all files
   - Preserve KiCad net hierarchy in names
   - Example: "/esp32s3mini1/EN" â†’ esp32s3mini1_en

3. **Hierarchy Handling**:
   - Properly pass nets through hierarchy
   - Maintain exact KiCad net connections
   - Example: USB D+/D- should match ESP32 connections exactly

4. **Power Nets**:
   - Single GND net definition
   - Proper power net handling (+3V3, +5V)
   - No duplicate net definitions

## Proposed Changes

### 1. Component Reference Fix
```python
# Current
esp32s3mini1_C1 = Part(...)

# Proposed
C1 = Part(...)  # Use exact KiCad refdes
```

### 2. Net Name Standardization
```python
# Current
_D_ = Net('_D_')

# Proposed
d_n = Net('d_n')  # Consistent lowercase with underscores
d_p = Net('d_p')
```

### 3. Hierarchy Net Passing
```python
# Current
def esp32s3mini1(GND, _3V3, ...)

# Proposed
def esp32s3mini1(gnd, net_3v3, en, ...)  # Explicit net names
```

### 4. Single GND Net
```python
# Current
gnd = Net('GND')
GND = Net('GND')

# Proposed
gnd = Net('GND')  # Single definition
```

### 5. Complete Net Mapping
```python
# Current
Missing nets like esp32s3mini1_en

# Proposed
# Add all nets from KiCad netlist
esp32s3mini1_en = Net('esp32s3mini1_en')
net_p1_cc = Net('net_p1_cc')
```

## Implementation Plan

1. Update net name conversion to be consistent:
   - Convert all names to lowercase
   - Replace special chars with underscores
   - Preserve hierarchy in names

2. Fix component references:
   - Use exact KiCad refdes
   - Remove sheet prefixes

3. Implement proper net passing:
   - Map all nets through hierarchy
   - Maintain exact KiCad connections

4. Add validation:
   - Verify all KiCad nets appear in output
   - Check for duplicate nets
   - Validate net connections match

5. Update test cases:
   - Add tests for net name conversion
   - Add hierarchy passing tests
   - Add component reference tests

## Example Fixed Output

### esp32s3mini1.py
```python
@subcircuit
def esp32s3mini1(gnd, net_3v3, net_en, net_hw_ver, ...):
    # Components
    C1 = Part('Device', 'C', value='10uF')
    J1 = Part('Connector_Generic', 'Conn_02x03_Odd_Even')
    U3 = Part('RF_Module', 'ESP32-S3-MINI-1')

    # Connections
    net_3v3 += C1['1'], J1['2'], U3['3']
    net_en += J1['1'], U3['45']
    net_hw_ver += U3['5']
    gnd += C1['2'], J1['4'], U3['1']
```

### main.py
```python
def main():
    # Single GND net
    gnd = Net('GND')
    
    # Consistent net names
    net_3v3 = Net('net_3v3')
    net_5v = Net('net_5v')
    net_en = Net('net_en')
    net_hw_ver = Net('net_hw_ver')
    
    # Call subcircuits
    esp32s3mini1(gnd, net_3v3, net_en, net_hw_ver, ...)
```

This update documents the current issues and provides a clear path forward for fixing the netlist conversion process.

/* End of file: PLANNING_DOC.md */

/* Begin of file: example_kicad_project.net */
(export (version "E")
  (design
    (source "/Users/shanemattner/Desktop/skidl/example_kicad_project/example_kicad_project.kicad_sch")
    (date "2025-01-25T19:06:42-0800")
    (tool "Eeschema 8.0.6")
    (sheet (number "1") (name "/") (tstamps "/")
      (title_block
        (title)
        (company)
        (rev)
        (date)
        (source "example_kicad_project.kicad_sch")
        (comment (number "1") (value ""))
        (comment (number "2") (value ""))
        (comment (number "3") (value ""))
        (comment (number "4") (value ""))
        (comment (number "5") (value ""))
        (comment (number "6") (value ""))
        (comment (number "7") (value ""))
        (comment (number "8") (value ""))
        (comment (number "9") (value ""))))
    (sheet (number "2") (name "/esp32s3mini1/") (tstamps "/e6f5f316-cb92-4d26-9a5c-0bb6c841d4b0/")
      (title_block
        (title)
        (company)
        (rev)
        (date)
        (source "esp32s3mini1.kicad_sch")
        (comment (number "1") (value ""))
        (comment (number "2") (value ""))
        (comment (number "3") (value ""))
        (comment (number "4") (value ""))
        (comment (number "5") (value ""))
        (comment (number "6") (value ""))
        (comment (number "7") (value ""))
        (comment (number "8") (value ""))
        (comment (number "9") (value ""))))
    (sheet (number "3") (name "/3v3_regulator/") (tstamps "/7a16d2b9-1ea1-4c05-9c09-25544e050e50/")
      (title_block
        (title)
        (company)
        (rev)
        (date)
        (source "power2.kicad_sch")
        (comment (number "1") (value ""))
        (comment (number "2") (value ""))
        (comment (number "3") (value ""))
        (comment (number "4") (value ""))
        (comment (number "5") (value ""))
        (comment (number "6") (value ""))
        (comment (number "7") (value ""))
        (comment (number "8") (value ""))
        (comment (number "9") (value ""))))
    (sheet (number "4") (name "/esp32s3mini1/resistor_divider1/") (tstamps "/e6f5f316-cb92-4d26-9a5c-0bb6c841d4b0/0f8673e0-e78a-49db-bb03-1ef92ea13213/")
      (title_block
        (title)
        (company)
        (rev)
        (date)
        (source "resistor_divider.kicad_sch")
        (comment (number "1") (value ""))
        (comment (number "2") (value ""))
        (comment (number "3") (value ""))
        (comment (number "4") (value ""))
        (comment (number "5") (value ""))
        (comment (number "6") (value ""))
        (comment (number "7") (value ""))
        (comment (number "8") (value ""))
        (comment (number "9") (value ""))))
    (sheet (number "5") (name "/USB/") (tstamps "/86dcdd56-4325-4acf-86b9-d97ccccee45f/")
      (title_block
        (title)
        (company)
        (rev)
        (date)
        (source "usb.kicad_sch")
        (comment (number "1") (value ""))
        (comment (number "2") (value ""))
        (comment (number "3") (value ""))
        (comment (number "4") (value ""))
        (comment (number "5") (value ""))
        (comment (number "6") (value ""))
        (comment (number "7") (value ""))
        (comment (number "8") (value ""))
        (comment (number "9") (value "")))))
  (components
    (comp (ref "C1")
      (value "10uF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (description "Unpolarized capacitor")
      (fields
        (field (name "Footprint") "Capacitor_SMD:C_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Unpolarized capacitor"))
      (libsource (lib "Device") (part "C") (description "Unpolarized capacitor"))
      (property (name "Sheetname") (value "esp32s3mini1"))
      (property (name "Sheetfile") (value "esp32s3mini1.kicad_sch"))
      (property (name "ki_keywords") (value "cap capacitor"))
      (property (name "ki_fp_filters") (value "C_*"))
      (sheetpath (names "/esp32s3mini1/") (tstamps "/e6f5f316-cb92-4d26-9a5c-0bb6c841d4b0/"))
      (tstamps "5cd58687-4cea-41b8-899a-8cbda5bc386c"))
    (comp (ref "J1")
      (value "Conn_02x03_Odd_Even")
      (footprint "Connector_IDC:IDC-Header_2x03_P2.54mm_Vertical")
      (description "Generic connector, double row, 02x03, odd/even pin numbering scheme (row 1 odd numbers, row 2 even numbers), script generated (kicad-library-utils/schlib/autogen/connector/)")
      (fields
        (field (name "Footprint") "Connector_IDC:IDC-Header_2x03_P2.54mm_Vertical")
        (field (name "Datasheet"))
        (field (name "Description") "Generic connector, double row, 02x03, odd/even pin numbering scheme (row 1 odd numbers, row 2 even numbers), script generated (kicad-library-utils/schlib/autogen/connector/)"))
      (libsource (lib "Connector_Generic") (part "Conn_02x03_Odd_Even") (description "Generic connector, double row, 02x03, odd/even pin numbering scheme (row 1 odd numbers, row 2 even numbers), script generated (kicad-library-utils/schlib/autogen/connector/)"))
      (property (name "Sheetname") (value "esp32s3mini1"))
      (property (name "Sheetfile") (value "esp32s3mini1.kicad_sch"))
      (property (name "ki_keywords") (value "connector"))
      (property (name "ki_fp_filters") (value "Connector*:*_2x??_*"))
      (sheetpath (names "/esp32s3mini1/") (tstamps "/e6f5f316-cb92-4d26-9a5c-0bb6c841d4b0/"))
      (tstamps "59927a6c-8af2-4d54-b822-7be7f0847ac0"))
    (comp (ref "U3")
      (value "ESP32-S3-MINI-1")
      (footprint "RF_Module:ESP32-S2-MINI-1")
      (datasheet "https://www.espressif.com/sites/default/files/documentation/esp32-s3-mini-1_mini-1u_datasheet_en.pdf")
      (description "RF Module, ESP32-S3 SoC, Wi-Fi 802.11b/g/n, Bluetooth, BLE, 32-bit, 3.3V, SMD, onboard antenna")
      (fields
        (field (name "Footprint") "RF_Module:ESP32-S2-MINI-1")
        (field (name "Datasheet") "https://www.espressif.com/sites/default/files/documentation/esp32-s3-mini-1_mini-1u_datasheet_en.pdf")
        (field (name "Description") "RF Module, ESP32-S3 SoC, Wi-Fi 802.11b/g/n, Bluetooth, BLE, 32-bit, 3.3V, SMD, onboard antenna"))
      (libsource (lib "RF_Module") (part "ESP32-S3-MINI-1") (description "RF Module, ESP32-S3 SoC, Wi-Fi 802.11b/g/n, Bluetooth, BLE, 32-bit, 3.3V, SMD, onboard antenna"))
      (property (name "Sheetname") (value "esp32s3mini1"))
      (property (name "Sheetfile") (value "esp32s3mini1.kicad_sch"))
      (property (name "ki_keywords") (value "RF Radio BT ESP ESP32-S3 Espressif"))
      (property (name "ki_fp_filters") (value "ESP32?S*MINI?1"))
      (sheetpath (names "/esp32s3mini1/") (tstamps "/e6f5f316-cb92-4d26-9a5c-0bb6c841d4b0/"))
      (tstamps "2df607b7-4e88-4134-9a7c-6042ff70680a"))
    (comp (ref "C2")
      (value "10uF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (description "Unpolarized capacitor")
      (fields
        (field (name "Footprint") "Capacitor_SMD:C_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Unpolarized capacitor"))
      (libsource (lib "Device") (part "C") (description "Unpolarized capacitor"))
      (property (name "Sheetname") (value "3v3_regulator"))
      (property (name "Sheetfile") (value "power2.kicad_sch"))
      (property (name "ki_keywords") (value "cap capacitor"))
      (property (name "ki_fp_filters") (value "C_*"))
      (sheetpath (names "/3v3_regulator/") (tstamps "/7a16d2b9-1ea1-4c05-9c09-25544e050e50/"))
      (tstamps "5157ccba-dd1d-4514-a3b3-6dca7bbd2414"))
    (comp (ref "C3")
      (value "10uF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (description "Unpolarized capacitor")
      (fields
        (field (name "Footprint") "Capacitor_SMD:C_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Unpolarized capacitor"))
      (libsource (lib "Device") (part "C") (description "Unpolarized capacitor"))
      (property (name "Sheetname") (value "3v3_regulator"))
      (property (name "Sheetfile") (value "power2.kicad_sch"))
      (property (name "ki_keywords") (value "cap capacitor"))
      (property (name "ki_fp_filters") (value "C_*"))
      (sheetpath (names "/3v3_regulator/") (tstamps "/7a16d2b9-1ea1-4c05-9c09-25544e050e50/"))
      (tstamps "61540b06-5dda-457c-bfc9-986f90574a30"))
    (comp (ref "C5")
      (value "100nF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (description "Unpolarized capacitor")
      (fields
        (field (name "Footprint") "Capacitor_SMD:C_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Unpolarized capacitor"))
      (libsource (lib "Device") (part "C") (description "Unpolarized capacitor"))
      (property (name "Sheetname") (value "3v3_regulator"))
      (property (name "Sheetfile") (value "power2.kicad_sch"))
      (property (name "ki_keywords") (value "cap capacitor"))
      (property (name "ki_fp_filters") (value "C_*"))
      (sheetpath (names "/3v3_regulator/") (tstamps "/7a16d2b9-1ea1-4c05-9c09-25544e050e50/"))
      (tstamps "9c43689d-6b61-49d9-a568-462fcea6fe04"))
    (comp (ref "C9")
      (value "100nF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (description "Unpolarized capacitor")
      (fields
        (field (name "Footprint") "Capacitor_SMD:C_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Unpolarized capacitor"))
      (libsource (lib "Device") (part "C") (description "Unpolarized capacitor"))
      (property (name "Sheetname") (value "3v3_regulator"))
      (property (name "Sheetfile") (value "power2.kicad_sch"))
      (property (name "ki_keywords") (value "cap capacitor"))
      (property (name "ki_fp_filters") (value "C_*"))
      (sheetpath (names "/3v3_regulator/") (tstamps "/7a16d2b9-1ea1-4c05-9c09-25544e050e50/"))
      (tstamps "675abe91-a494-48a8-bc1a-c5cb923836a7"))
    (comp (ref "R2")
      (value "2k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (description "Resistor")
      (fields
        (field (name "Footprint") "Resistor_SMD:R_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Resistor"))
      (libsource (lib "Device") (part "R") (description "Resistor"))
      (property (name "Sheetname") (value "3v3_regulator"))
      (property (name "Sheetfile") (value "power2.kicad_sch"))
      (property (name "ki_keywords") (value "R res resistor"))
      (property (name "ki_fp_filters") (value "R_*"))
      (sheetpath (names "/3v3_regulator/") (tstamps "/7a16d2b9-1ea1-4c05-9c09-25544e050e50/"))
      (tstamps "52a779c0-19e5-4cf5-9ec4-dbd3555ca4b8"))
    (comp (ref "R3")
      (value "1k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (description "Resistor")
      (fields
        (field (name "Footprint") "Resistor_SMD:R_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Resistor"))
      (libsource (lib "Device") (part "R") (description "Resistor"))
      (property (name "Sheetname") (value "3v3_regulator"))
      (property (name "Sheetfile") (value "power2.kicad_sch"))
      (property (name "ki_keywords") (value "R res resistor"))
      (property (name "ki_fp_filters") (value "R_*"))
      (sheetpath (names "/3v3_regulator/") (tstamps "/7a16d2b9-1ea1-4c05-9c09-25544e050e50/"))
      (tstamps "8125a0e2-acf2-4409-b5b5-5b275a41b426"))
    (comp (ref "R7")
      (value "1k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (description "Resistor")
      (fields
        (field (name "Footprint") "Resistor_SMD:R_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Resistor"))
      (libsource (lib "Device") (part "R") (description "Resistor"))
      (property (name "Sheetname") (value "3v3_regulator"))
      (property (name "Sheetfile") (value "power2.kicad_sch"))
      (property (name "ki_keywords") (value "R res resistor"))
      (property (name "ki_fp_filters") (value "R_*"))
      (sheetpath (names "/3v3_regulator/") (tstamps "/7a16d2b9-1ea1-4c05-9c09-25544e050e50/"))
      (tstamps "eb97c733-2a6c-4a37-a54c-406a8d81cd4a"))
    (comp (ref "R8")
      (value "2k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (description "Resistor")
      (fields
        (field (name "Footprint") "Resistor_SMD:R_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Resistor"))
      (libsource (lib "Device") (part "R") (description "Resistor"))
      (property (name "Sheetname") (value "3v3_regulator"))
      (property (name "Sheetfile") (value "power2.kicad_sch"))
      (property (name "ki_keywords") (value "R res resistor"))
      (property (name "ki_fp_filters") (value "R_*"))
      (sheetpath (names "/3v3_regulator/") (tstamps "/7a16d2b9-1ea1-4c05-9c09-25544e050e50/"))
      (tstamps "ca21911c-632c-4f20-93d9-7fbfddaba892"))
    (comp (ref "U1")
      (value "NCP1117-3.3_SOT223")
      (footprint "Package_TO_SOT_SMD:SOT-223-3_TabPin2")
      (datasheet "http://www.onsemi.com/pub_link/Collateral/NCP1117-D.PDF")
      (description "1A Low drop-out regulator, Fixed Output 3.3V, SOT-223")
      (fields
        (field (name "Footprint") "Package_TO_SOT_SMD:SOT-223-3_TabPin2")
        (field (name "Datasheet") "http://www.onsemi.com/pub_link/Collateral/NCP1117-D.PDF")
        (field (name "Description") "1A Low drop-out regulator, Fixed Output 3.3V, SOT-223"))
      (libsource (lib "Regulator_Linear") (part "NCP1117-3.3_SOT223") (description "1A Low drop-out regulator, Fixed Output 3.3V, SOT-223"))
      (property (name "Sheetname") (value "3v3_regulator"))
      (property (name "Sheetfile") (value "power2.kicad_sch"))
      (property (name "ki_keywords") (value "REGULATOR LDO 3.3V"))
      (property (name "ki_fp_filters") (value "SOT?223*TabPin2*"))
      (sheetpath (names "/3v3_regulator/") (tstamps "/7a16d2b9-1ea1-4c05-9c09-25544e050e50/"))
      (tstamps "4572c527-872b-4369-9634-4e3f854b0e19"))
    (comp (ref "C10")
      (value "100nF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (description "Unpolarized capacitor")
      (fields
        (field (name "Footprint") "Capacitor_SMD:C_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Unpolarized capacitor"))
      (libsource (lib "Device") (part "C") (description "Unpolarized capacitor"))
      (property (name "Sheetname") (value "resistor_divider1"))
      (property (name "Sheetfile") (value "resistor_divider.kicad_sch"))
      (property (name "ki_keywords") (value "cap capacitor"))
      (property (name "ki_fp_filters") (value "C_*"))
      (sheetpath (names "/esp32s3mini1/resistor_divider1/") (tstamps "/e6f5f316-cb92-4d26-9a5c-0bb6c841d4b0/0f8673e0-e78a-49db-bb03-1ef92ea13213/"))
      (tstamps "e40afd4b-c6bc-4b32-bbe4-7680b58e18f9"))
    (comp (ref "R9")
      (value "2k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (description "Resistor")
      (fields
        (field (name "Footprint") "Resistor_SMD:R_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Resistor"))
      (libsource (lib "Device") (part "R") (description "Resistor"))
      (property (name "Sheetname") (value "resistor_divider1"))
      (property (name "Sheetfile") (value "resistor_divider.kicad_sch"))
      (property (name "ki_keywords") (value "R res resistor"))
      (property (name "ki_fp_filters") (value "R_*"))
      (sheetpath (names "/esp32s3mini1/resistor_divider1/") (tstamps "/e6f5f316-cb92-4d26-9a5c-0bb6c841d4b0/0f8673e0-e78a-49db-bb03-1ef92ea13213/"))
      (tstamps "aa69fac3-2603-4df3-806f-6632d2bb71f8"))
    (comp (ref "R10")
      (value "1k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (description "Resistor")
      (fields
        (field (name "Footprint") "Resistor_SMD:R_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Resistor"))
      (libsource (lib "Device") (part "R") (description "Resistor"))
      (property (name "Sheetname") (value "resistor_divider1"))
      (property (name "Sheetfile") (value "resistor_divider.kicad_sch"))
      (property (name "ki_keywords") (value "R res resistor"))
      (property (name "ki_fp_filters") (value "R_*"))
      (sheetpath (names "/esp32s3mini1/resistor_divider1/") (tstamps "/e6f5f316-cb92-4d26-9a5c-0bb6c841d4b0/0f8673e0-e78a-49db-bb03-1ef92ea13213/"))
      (tstamps "870fdb49-13fc-4325-933e-2afd85657a76"))
    (comp (ref "C4")
      (value "10uF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (description "Unpolarized capacitor")
      (fields
        (field (name "Footprint") "Capacitor_SMD:C_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Unpolarized capacitor"))
      (libsource (lib "Device") (part "C") (description "Unpolarized capacitor"))
      (property (name "Sheetname") (value "USB"))
      (property (name "Sheetfile") (value "usb.kicad_sch"))
      (property (name "ki_keywords") (value "cap capacitor"))
      (property (name "ki_fp_filters") (value "C_*"))
      (sheetpath (names "/USB/") (tstamps "/86dcdd56-4325-4acf-86b9-d97ccccee45f/"))
      (tstamps "222e9b17-e836-42c8-a5b8-a3b8d2801b42"))
    (comp (ref "P1")
      (value "USB_C_Plug_USB2.0")
      (footprint "Connector_USB:USB_C_Receptacle_GCT_USB4105-xx-A_16P_TopMnt_Horizontal")
      (datasheet "https://www.usb.org/sites/default/files/documents/usb_type-c.zip")
      (description "USB 2.0-only Type-C Plug connector")
      (fields
        (field (name "Footprint") "Connector_USB:USB_C_Receptacle_GCT_USB4105-xx-A_16P_TopMnt_Horizontal")
        (field (name "Datasheet") "https://www.usb.org/sites/default/files/documents/usb_type-c.zip")
        (field (name "Description") "USB 2.0-only Type-C Plug connector"))
      (libsource (lib "Connector") (part "USB_C_Plug_USB2.0") (description "USB 2.0-only Type-C Plug connector"))
      (property (name "Sheetname") (value "USB"))
      (property (name "Sheetfile") (value "usb.kicad_sch"))
      (property (name "ki_keywords") (value "usb universal serial bus type-C USB2.0"))
      (property (name "ki_fp_filters") (value "USB*C*Plug*"))
      (sheetpath (names "/USB/") (tstamps "/86dcdd56-4325-4acf-86b9-d97ccccee45f/"))
      (tstamps "b617cbe2-0c97-4c03-a46f-67392b0ae28d"))
    (comp (ref "R1")
      (value "5.1K")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (description "Resistor")
      (fields
        (field (name "Footprint") "Resistor_SMD:R_0603_1608Metric")
        (field (name "Datasheet"))
        (field (name "Description") "Resistor"))
      (libsource (lib "Device") (part "R") (description "Resistor"))
      (property (name "Sheetname") (value "USB"))
      (property (name "Sheetfile") (value "usb.kicad_sch"))
      (property (name "ki_keywords") (value "R res resistor"))
      (property (name "ki_fp_filters") (value "R_*"))
      (sheetpath (names "/USB/") (tstamps "/86dcdd56-4325-4acf-86b9-d97ccccee45f/"))
      (tstamps "ba1a1b70-2541-4e1d-8a6a-ef20afab2c66")))
  (libparts
    (libpart (lib "Connector") (part "USB_C_Plug_USB2.0")
      (description "USB 2.0-only Type-C Plug connector")
      (docs "https://www.usb.org/sites/default/files/documents/usb_type-c.zip")
      (footprints
        (fp "USB*C*Plug*"))
      (fields
        (field (name "Reference") "P")
        (field (name "Value") "USB_C_Plug_USB2.0")
        (field (name "Footprint"))
        (field (name "Datasheet") "https://www.usb.org/sites/default/files/documents/usb_type-c.zip")
        (field (name "Description") "USB 2.0-only Type-C Plug connector"))
      (pins
        (pin (num "A1") (name "GND") (type "passive"))
        (pin (num "A4") (name "VBUS") (type "passive"))
        (pin (num "A5") (name "CC") (type "bidirectional"))
        (pin (num "A6") (name "D+") (type "bidirectional"))
        (pin (num "A7") (name "D-") (type "bidirectional"))
        (pin (num "A9") (name "VBUS") (type "passive"))
        (pin (num "A12") (name "GND") (type "passive"))
        (pin (num "B1") (name "GND") (type "passive"))
        (pin (num "B4") (name "VBUS") (type "passive"))
        (pin (num "B5") (name "VCONN") (type "bidirectional"))
        (pin (num "B9") (name "VBUS") (type "passive"))
        (pin (num "B12") (name "GND") (type "passive"))
        (pin (num "S1") (name "SHIELD") (type "passive"))))
    (libpart (lib "Connector_Generic") (part "Conn_02x03_Odd_Even")
      (description "Generic connector, double row, 02x03, odd/even pin numbering scheme (row 1 odd numbers, row 2 even numbers), script generated (kicad-library-utils/schlib/autogen/connector/)")
      (docs "~")
      (footprints
        (fp "Connector*:*_2x??_*"))
      (fields
        (field (name "Reference") "J")
        (field (name "Value") "Conn_02x03_Odd_Even")
        (field (name "Footprint"))
        (field (name "Datasheet") "~")
        (field (name "Description") "Generic connector, double row, 02x03, odd/even pin numbering scheme (row 1 odd numbers, row 2 even numbers), script generated (kicad-library-utils/schlib/autogen/connector/)"))
      (pins
        (pin (num "1") (name "Pin_1") (type "passive"))
        (pin (num "2") (name "Pin_2") (type "passive"))
        (pin (num "3") (name "Pin_3") (type "passive"))
        (pin (num "4") (name "Pin_4") (type "passive"))
        (pin (num "5") (name "Pin_5") (type "passive"))
        (pin (num "6") (name "Pin_6") (type "passive"))))
    (libpart (lib "Device") (part "C")
      (description "Unpolarized capacitor")
      (docs "~")
      (footprints
        (fp "C_*"))
      (fields
        (field (name "Reference") "C")
        (field (name "Value") "C")
        (field (name "Footprint"))
        (field (name "Datasheet") "~")
        (field (name "Description") "Unpolarized capacitor"))
      (pins
        (pin (num "1") (name "") (type "passive"))
        (pin (num "2") (name "") (type "passive"))))
    (libpart (lib "Device") (part "R")
      (description "Resistor")
      (docs "~")
      (footprints
        (fp "R_*"))
      (fields
        (field (name "Reference") "R")
        (field (name "Value") "R")
        (field (name "Footprint"))
        (field (name "Datasheet") "~")
        (field (name "Description") "Resistor"))
      (pins
        (pin (num "1") (name "") (type "passive"))
        (pin (num "2") (name "") (type "passive"))))
    (libpart (lib "RF_Module") (part "ESP32-S3-MINI-1")
      (description "RF Module, ESP32-S3 SoC, Wi-Fi 802.11b/g/n, Bluetooth, BLE, 32-bit, 3.3V, SMD, onboard antenna")
      (docs "https://www.espressif.com/sites/default/files/documentation/esp32-s3-mini-1_mini-1u_datasheet_en.pdf")
      (footprints
        (fp "ESP32?S*MINI?1"))
      (fields
        (field (name "Reference") "U")
        (field (name "Value") "ESP32-S3-MINI-1")
        (field (name "Footprint") "RF_Module:ESP32-S2-MINI-1")
        (field (name "Datasheet") "https://www.espressif.com/sites/default/files/documentation/esp32-s3-mini-1_mini-1u_datasheet_en.pdf")
        (field (name "Description") "RF Module, ESP32-S3 SoC, Wi-Fi 802.11b/g/n, Bluetooth, BLE, 32-bit, 3.3V, SMD, onboard antenna"))
      (pins
        (pin (num "1") (name "GND") (type "power_in"))
        (pin (num "2") (name "GND") (type "passive"))
        (pin (num "3") (name "3V3") (type "power_in"))
        (pin (num "4") (name "IO0") (type "bidirectional"))
        (pin (num "5") (name "IO1") (type "bidirectional"))
        (pin (num "6") (name "IO2") (type "bidirectional"))
        (pin (num "7") (name "IO3") (type "bidirectional"))
        (pin (num "8") (name "IO4") (type "bidirectional"))
        (pin (num "9") (name "IO5") (type "bidirectional"))
        (pin (num "10") (name "IO6") (type "bidirectional"))
        (pin (num "11") (name "IO7") (type "bidirectional"))
        (pin (num "12") (name "IO8") (type "bidirectional"))
        (pin (num "13") (name "IO9") (type "bidirectional"))
        (pin (num "14") (name "IO10") (type "bidirectional"))
        (pin (num "15") (name "IO11") (type "bidirectional"))
        (pin (num "16") (name "IO12") (type "bidirectional"))
        (pin (num "17") (name "IO13") (type "bidirectional"))
        (pin (num "18") (name "IO14") (type "bidirectional"))
        (pin (num "19") (name "IO15") (type "bidirectional"))
        (pin (num "20") (name "IO16") (type "bidirectional"))
        (pin (num "21") (name "IO17") (type "bidirectional"))
        (pin (num "22") (name "IO18") (type "bidirectional"))
        (pin (num "23") (name "IO19") (type "bidirectional"))
        (pin (num "24") (name "IO20") (type "bidirectional"))
        (pin (num "25") (name "IO21") (type "bidirectional"))
        (pin (num "26") (name "IO26") (type "bidirectional"))
        (pin (num "27") (name "IO47") (type "bidirectional"))
        (pin (num "28") (name "IO33") (type "bidirectional"))
        (pin (num "29") (name "IO34") (type "bidirectional"))
        (pin (num "30") (name "IO48") (type "bidirectional"))
        (pin (num "31") (name "IO35") (type "bidirectional"))
        (pin (num "32") (name "IO36") (type "bidirectional"))
        (pin (num "33") (name "IO37") (type "bidirectional"))
        (pin (num "34") (name "IO38") (type "bidirectional"))
        (pin (num "35") (name "IO39") (type "bidirectional"))
        (pin (num "36") (name "IO40") (type "bidirectional"))
        (pin (num "37") (name "IO41") (type "bidirectional"))
        (pin (num "38") (name "IO42") (type "bidirectional"))
        (pin (num "39") (name "TXD0") (type "bidirectional"))
        (pin (num "40") (name "RXD0") (type "bidirectional"))
        (pin (num "41") (name "IO45") (type "bidirectional"))
        (pin (num "42") (name "GND") (type "passive"))
        (pin (num "43") (name "GND") (type "passive"))
        (pin (num "44") (name "IO46") (type "bidirectional"))
        (pin (num "45") (name "EN") (type "input"))
        (pin (num "46") (name "GND") (type "passive"))
        (pin (num "47") (name "GND") (type "passive"))
        (pin (num "48") (name "GND") (type "passive"))
        (pin (num "49") (name "GND") (type "passive"))
        (pin (num "50") (name "GND") (type "passive"))
        (pin (num "51") (name "GND") (type "passive"))
        (pin (num "52") (name "GND") (type "passive"))
        (pin (num "53") (name "GND") (type "passive"))
        (pin (num "54") (name "GND") (type "passive"))
        (pin (num "55") (name "GND") (type "passive"))
        (pin (num "56") (name "GND") (type "passive"))
        (pin (num "57") (name "GND") (type "passive"))
        (pin (num "58") (name "GND") (type "passive"))
        (pin (num "59") (name "GND") (type "passive"))
        (pin (num "60") (name "GND") (type "passive"))
        (pin (num "61") (name "GND") (type "passive"))
        (pin (num "62") (name "GND") (type "passive"))
        (pin (num "63") (name "GND") (type "passive"))
        (pin (num "64") (name "GND") (type "passive"))
        (pin (num "65") (name "GND") (type "passive"))))
    (libpart (lib "Regulator_Linear") (part "NCP1117-3.3_SOT223")
      (description "1A Low drop-out regulator, Fixed Output 3.3V, SOT-223")
      (docs "http://www.onsemi.com/pub_link/Collateral/NCP1117-D.PDF")
      (footprints
        (fp "SOT?223*TabPin2*"))
      (fields
        (field (name "Reference") "U")
        (field (name "Value") "NCP1117-3.3_SOT223")
        (field (name "Footprint") "Package_TO_SOT_SMD:SOT-223-3_TabPin2")
        (field (name "Datasheet") "http://www.onsemi.com/pub_link/Collateral/NCP1117-D.PDF")
        (field (name "Description") "1A Low drop-out regulator, Fixed Output 3.3V, SOT-223"))
      (pins
        (pin (num "1") (name "GND") (type "power_in"))
        (pin (num "2") (name "VO") (type "power_out"))
        (pin (num "3") (name "VI") (type "power_in")))))
  (libraries
    (library (logical "Connector")
      (uri "/Applications/KiCad/KiCad.app/Contents/SharedSupport/symbols//Connector.kicad_sym"))
    (library (logical "Connector_Generic")
      (uri "/Applications/KiCad/KiCad.app/Contents/SharedSupport/symbols//Connector_Generic.kicad_sym"))
    (library (logical "Device")
      (uri "/Applications/KiCad/KiCad.app/Contents/SharedSupport/symbols//Device.kicad_sym"))
    (library (logical "RF_Module")
      (uri "/Applications/KiCad/KiCad.app/Contents/SharedSupport/symbols//RF_Module.kicad_sym"))
    (library (logical "Regulator_Linear")
      (uri "/Applications/KiCad/KiCad.app/Contents/SharedSupport/symbols//Regulator_Linear.kicad_sym")))
  (nets
    (net (code "1") (name "+3V3")
      (node (ref "C1") (pin "1") (pintype "passive"))
      (node (ref "C2") (pin "1") (pintype "passive"))
      (node (ref "J1") (pin "2") (pinfunction "Pin_2") (pintype "passive"))
      (node (ref "R8") (pin "1") (pintype "passive"))
      (node (ref "R9") (pin "1") (pintype "passive"))
      (node (ref "U1") (pin "2") (pinfunction "VO") (pintype "power_out"))
      (node (ref "U3") (pin "3") (pinfunction "3V3") (pintype "power_in")))
    (net (code "2") (name "+5V")
      (node (ref "C3") (pin "1") (pintype "passive"))
      (node (ref "C4") (pin "1") (pintype "passive"))
      (node (ref "P1") (pin "A4") (pinfunction "VBUS") (pintype "passive"))
      (node (ref "P1") (pin "A9") (pinfunction "VBUS") (pintype "passive"))
      (node (ref "P1") (pin "B4") (pinfunction "VBUS") (pintype "passive"))
      (node (ref "P1") (pin "B9") (pinfunction "VBUS") (pintype "passive"))
      (node (ref "R2") (pin "1") (pintype "passive"))
      (node (ref "U1") (pin "3") (pinfunction "VI") (pintype "power_in")))
    (net (code "3") (name "/3v3_monitor")
      (node (ref "C5") (pin "1") (pintype "passive"))
      (node (ref "R3") (pin "1") (pintype "passive"))
      (node (ref "R8") (pin "2") (pintype "passive"))
      (node (ref "U3") (pin "6") (pinfunction "IO2") (pintype "bidirectional")))
    (net (code "4") (name "/5v_monitor")
      (node (ref "C9") (pin "1") (pintype "passive"))
      (node (ref "R2") (pin "2") (pintype "passive"))
      (node (ref "R7") (pin "1") (pintype "passive"))
      (node (ref "U3") (pin "7") (pinfunction "IO3") (pintype "bidirectional")))
    (net (code "5") (name "/D+")
      (node (ref "P1") (pin "A6") (pinfunction "D+") (pintype "bidirectional"))
      (node (ref "U3") (pin "24") (pinfunction "IO20") (pintype "bidirectional")))
    (net (code "6") (name "/D-")
      (node (ref "P1") (pin "A7") (pinfunction "D-") (pintype "bidirectional"))
      (node (ref "U3") (pin "23") (pinfunction "IO19") (pintype "bidirectional")))
    (net (code "7") (name "/esp32s3mini1/EN")
      (node (ref "J1") (pin "1") (pinfunction "Pin_1") (pintype "passive"))
      (node (ref "U3") (pin "45") (pinfunction "EN") (pintype "input")))
    (net (code "8") (name "/esp32s3mini1/HW_VER")
      (node (ref "C10") (pin "1") (pintype "passive"))
      (node (ref "R10") (pin "1") (pintype "passive"))
      (node (ref "R9") (pin "2") (pintype "passive"))
      (node (ref "U3") (pin "5") (pinfunction "IO1") (pintype "bidirectional")))
    (net (code "9") (name "/esp32s3mini1/IO0")
      (node (ref "J1") (pin "6") (pinfunction "Pin_6") (pintype "passive"))
      (node (ref "U3") (pin "4") (pinfunction "IO0") (pintype "bidirectional")))
    (net (code "10") (name "/esp32s3mini1/RX")
      (node (ref "J1") (pin "5") (pinfunction "Pin_5") (pintype "passive"))
      (node (ref "U3") (pin "40") (pinfunction "RXD0") (pintype "bidirectional")))
    (net (code "11") (name "/esp32s3mini1/TX")
      (node (ref "J1") (pin "3") (pinfunction "Pin_3") (pintype "passive"))
      (node (ref "U3") (pin "39") (pinfunction "TXD0") (pintype "bidirectional")))
    (net (code "12") (name "GND")
      (node (ref "C1") (pin "2") (pintype "passive"))
      (node (ref "C10") (pin "2") (pintype "passive"))
      (node (ref "C2") (pin "2") (pintype "passive"))
      (node (ref "C3") (pin "2") (pintype "passive"))
      (node (ref "C4") (pin "2") (pintype "passive"))
      (node (ref "C5") (pin "2") (pintype "passive"))
      (node (ref "C9") (pin "2") (pintype "passive"))
      (node (ref "J1") (pin "4") (pinfunction "Pin_4") (pintype "passive"))
      (node (ref "P1") (pin "A1") (pinfunction "GND") (pintype "passive"))
      (node (ref "P1") (pin "A12") (pinfunction "GND") (pintype "passive"))
      (node (ref "P1") (pin "B1") (pinfunction "GND") (pintype "passive"))
      (node (ref "P1") (pin "B12") (pinfunction "GND") (pintype "passive"))
      (node (ref "P1") (pin "S1") (pinfunction "SHIELD") (pintype "passive"))
      (node (ref "R1") (pin "2") (pintype "passive"))
      (node (ref "R10") (pin "2") (pintype "passive"))
      (node (ref "R3") (pin "2") (pintype "passive"))
      (node (ref "R7") (pin "2") (pintype "passive"))
      (node (ref "U1") (pin "1") (pinfunction "GND") (pintype "power_in"))
      (node (ref "U3") (pin "1") (pinfunction "GND") (pintype "power_in"))
      (node (ref "U3") (pin "2") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "42") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "43") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "46") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "47") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "48") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "49") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "50") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "51") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "52") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "53") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "54") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "55") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "56") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "57") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "58") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "59") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "60") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "61") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "62") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "63") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "64") (pinfunction "GND") (pintype "passive"))
      (node (ref "U3") (pin "65") (pinfunction "GND") (pintype "passive")))
    (net (code "13") (name "Net-(P1-CC)")
      (node (ref "P1") (pin "A5") (pinfunction "CC") (pintype "bidirectional"))
      (node (ref "R1") (pin "1") (pintype "passive")))
    (net (code "14") (name "unconnected-(P1-VCONN-PadB5)")
      (node (ref "P1") (pin "B5") (pinfunction "VCONN") (pintype "bidirectional+no_connect")))
    (net (code "15") (name "unconnected-(U3-IO4-Pad8)")
      (node (ref "U3") (pin "8") (pinfunction "IO4") (pintype "bidirectional")))
    (net (code "16") (name "unconnected-(U3-IO5-Pad9)")
      (node (ref "U3") (pin "9") (pinfunction "IO5") (pintype "bidirectional")))
    (net (code "17") (name "unconnected-(U3-IO6-Pad10)")
      (node (ref "U3") (pin "10") (pinfunction "IO6") (pintype "bidirectional")))
    (net (code "18") (name "unconnected-(U3-IO7-Pad11)")
      (node (ref "U3") (pin "11") (pinfunction "IO7") (pintype "bidirectional")))
    (net (code "19") (name "unconnected-(U3-IO8-Pad12)")
      (node (ref "U3") (pin "12") (pinfunction "IO8") (pintype "bidirectional")))
    (net (code "20") (name "unconnected-(U3-IO9-Pad13)")
      (node (ref "U3") (pin "13") (pinfunction "IO9") (pintype "bidirectional")))
    (net (code "21") (name "unconnected-(U3-IO10-Pad14)")
      (node (ref "U3") (pin "14") (pinfunction "IO10") (pintype "bidirectional")))
    (net (code "22") (name "unconnected-(U3-IO11-Pad15)")
      (node (ref "U3") (pin "15") (pinfunction "IO11") (pintype "bidirectional")))
    (net (code "23") (name "unconnected-(U3-IO12-Pad16)")
      (node (ref "U3") (pin "16") (pinfunction "IO12") (pintype "bidirectional")))
    (net (code "24") (name "unconnected-(U3-IO13-Pad17)")
      (node (ref "U3") (pin "17") (pinfunction "IO13") (pintype "bidirectional")))
    (net (code "25") (name "unconnected-(U3-IO14-Pad18)")
      (node (ref "U3") (pin "18") (pinfunction "IO14") (pintype "bidirectional")))
    (net (code "26") (name "unconnected-(U3-IO15-Pad19)")
      (node (ref "U3") (pin "19") (pinfunction "IO15") (pintype "bidirectional")))
    (net (code "27") (name "unconnected-(U3-IO16-Pad20)")
      (node (ref "U3") (pin "20") (pinfunction "IO16") (pintype "bidirectional")))
    (net (code "28") (name "unconnected-(U3-IO17-Pad21)")
      (node (ref "U3") (pin "21") (pinfunction "IO17") (pintype "bidirectional")))
    (net (code "29") (name "unconnected-(U3-IO18-Pad22)")
      (node (ref "U3") (pin "22") (pinfunction "IO18") (pintype "bidirectional")))
    (net (code "30") (name "unconnected-(U3-IO21-Pad25)")
      (node (ref "U3") (pin "25") (pinfunction "IO21") (pintype "bidirectional")))
    (net (code "31") (name "unconnected-(U3-IO26-Pad26)")
      (node (ref "U3") (pin "26") (pinfunction "IO26") (pintype "bidirectional")))
    (net (code "32") (name "unconnected-(U3-IO33-Pad28)")
      (node (ref "U3") (pin "28") (pinfunction "IO33") (pintype "bidirectional")))
    (net (code "33") (name "unconnected-(U3-IO34-Pad29)")
      (node (ref "U3") (pin "29") (pinfunction "IO34") (pintype "bidirectional")))
    (net (code "34") (name "unconnected-(U3-IO35-Pad31)")
      (node (ref "U3") (pin "31") (pinfunction "IO35") (pintype "bidirectional")))
    (net (code "35") (name "unconnected-(U3-IO36-Pad32)")
      (node (ref "U3") (pin "32") (pinfunction "IO36") (pintype "bidirectional")))
    (net (code "36") (name "unconnected-(U3-IO37-Pad33)")
      (node (ref "U3") (pin "33") (pinfunction "IO37") (pintype "bidirectional")))
    (net (code "37") (name "unconnected-(U3-IO38-Pad34)")
      (node (ref "U3") (pin "34") (pinfunction "IO38") (pintype "bidirectional")))
    (net (code "38") (name "unconnected-(U3-IO39-Pad35)")
      (node (ref "U3") (pin "35") (pinfunction "IO39") (pintype "bidirectional")))
    (net (code "39") (name "unconnected-(U3-IO40-Pad36)")
      (node (ref "U3") (pin "36") (pinfunction "IO40") (pintype "bidirectional")))
    (net (code "40") (name "unconnected-(U3-IO41-Pad37)")
      (node (ref "U3") (pin "37") (pinfunction "IO41") (pintype "bidirectional")))
    (net (code "41") (name "unconnected-(U3-IO42-Pad38)")
      (node (ref "U3") (pin "38") (pinfunction "IO42") (pintype "bidirectional")))
    (net (code "42") (name "unconnected-(U3-IO45-Pad41)")
      (node (ref "U3") (pin "41") (pinfunction "IO45") (pintype "bidirectional")))
    (net (code "43") (name "unconnected-(U3-IO46-Pad44)")
      (node (ref "U3") (pin "44") (pinfunction "IO46") (pintype "bidirectional")))
    (net (code "44") (name "unconnected-(U3-IO47-Pad27)")
      (node (ref "U3") (pin "27") (pinfunction "IO47") (pintype "bidirectional")))
    (net (code "45") (name "unconnected-(U3-IO48-Pad30)")
      (node (ref "U3") (pin "30") (pinfunction "IO48") (pintype "bidirectional")))))
/* End of file: example_kicad_project.net */

/* Begin of file: USB.py */
# -*- coding: utf-8 -*-
from skidl import *

@subcircuit
def USB(_p_5V, D_p, D_n, GND):
    # Components
    C4 = Part('Device', 'C', value='10uF', footprint='Capacitor_SMD:C_0603_1608Metric', tag='C4', Sheetname='USB', Sheetfile='usb.kicad_sch', ki_keywords='cap capacitor', ki_fp_filters='C_*')
    P1 = Part('Connector', 'USB_C_Plug_USB2.0', value='USB_C_Plug_USB2.0', footprint='Connector_USB:USB_C_Receptacle_GCT_USB4105-xx-A_16P_TopMnt_Horizontal', tag='P1', Sheetname='USB', Sheetfile='usb.kicad_sch', ki_keywords='usb universal serial bus type-C USB2.0', ki_fp_filters='USB*C*Plug*')
    R1 = Part('Device', 'R', value='5.1K', footprint='Resistor_SMD:R_0603_1608Metric', tag='R1', Sheetname='USB', Sheetfile='usb.kicad_sch', ki_keywords='R res resistor', ki_fp_filters='R_*')

    # Local nets
    Net__P1_CC_ = Net('Net-(P1-CC)')

    # Connections
    _p_5V += C4['1'], P1['A4'], P1['A9'], P1['B4'], P1['B9']
    D_p += P1['A6']
    D_n += P1['A7']
    GND += C4['2'], P1['A1'], P1['A12'], P1['B1'], P1['B12'], P1['S1'], R1['2']
    Net__P1_CC_ += P1['A5'], R1['1']

/* End of file: USB.py */

/* Begin of file: _3v3_regulator.py */
# -*- coding: utf-8 -*-
from skidl import *

@subcircuit
def _3v3_regulator(_p_3V3, _p_5V, _3v3_monitor, _5v_monitor, GND):
    # Components
    C2 = Part('Device', 'C', value='10uF', footprint='Capacitor_SMD:C_0603_1608Metric', tag='C2', Sheetname='3v3_regulator', Sheetfile='power2.kicad_sch', ki_keywords='cap capacitor', ki_fp_filters='C_*')
    C3 = Part('Device', 'C', value='10uF', footprint='Capacitor_SMD:C_0603_1608Metric', tag='C3', Sheetname='3v3_regulator', Sheetfile='power2.kicad_sch', ki_keywords='cap capacitor', ki_fp_filters='C_*')
    C5 = Part('Device', 'C', value='100nF', footprint='Capacitor_SMD:C_0603_1608Metric', tag='C5', Sheetname='3v3_regulator', Sheetfile='power2.kicad_sch', ki_keywords='cap capacitor', ki_fp_filters='C_*')
    C9 = Part('Device', 'C', value='100nF', footprint='Capacitor_SMD:C_0603_1608Metric', tag='C9', Sheetname='3v3_regulator', Sheetfile='power2.kicad_sch', ki_keywords='cap capacitor', ki_fp_filters='C_*')
    R2 = Part('Device', 'R', value='2k', footprint='Resistor_SMD:R_0603_1608Metric', tag='R2', Sheetname='3v3_regulator', Sheetfile='power2.kicad_sch', ki_keywords='R res resistor', ki_fp_filters='R_*')
    R3 = Part('Device', 'R', value='1k', footprint='Resistor_SMD:R_0603_1608Metric', tag='R3', Sheetname='3v3_regulator', Sheetfile='power2.kicad_sch', ki_keywords='R res resistor', ki_fp_filters='R_*')
    R7 = Part('Device', 'R', value='1k', footprint='Resistor_SMD:R_0603_1608Metric', tag='R7', Sheetname='3v3_regulator', Sheetfile='power2.kicad_sch', ki_keywords='R res resistor', ki_fp_filters='R_*')
    R8 = Part('Device', 'R', value='2k', footprint='Resistor_SMD:R_0603_1608Metric', tag='R8', Sheetname='3v3_regulator', Sheetfile='power2.kicad_sch', ki_keywords='R res resistor', ki_fp_filters='R_*')
    U1 = Part('Regulator_Linear', 'NCP1117-3.3_SOT223', value='NCP1117-3.3_SOT223', footprint='Package_TO_SOT_SMD:SOT-223-3_TabPin2', tag='U1', Sheetname='3v3_regulator', Sheetfile='power2.kicad_sch', ki_keywords='REGULATOR LDO 3.3V', ki_fp_filters='SOT?223*TabPin2*')

    # Connections
    _p_3V3 += C2['1'], R8['1'], U1['2']
    _p_5V += C3['1'], R2['1'], U1['3']
    _3v3_monitor += C5['1'], R3['1'], R8['2']
    _5v_monitor += C9['1'], R2['2'], R7['1']
    GND += C2['2'], C3['2'], C5['2'], C9['2'], R3['2'], R7['2'], U1['1']

/* End of file: _3v3_regulator.py */

/* Begin of file: esp32s3mini1.py */
# -*- coding: utf-8 -*-
from skidl import *

@subcircuit
def esp32s3mini1(_p_3V3, _3v3_monitor, _5v_monitor, D_p, D_n, esp32s3mini1_HW_VER, GND):
    # Components
    C1 = Part('Device', 'C', value='10uF', footprint='Capacitor_SMD:C_0603_1608Metric', tag='C1', Sheetname='esp32s3mini1', Sheetfile='esp32s3mini1.kicad_sch', ki_keywords='cap capacitor', ki_fp_filters='C_*')
    J1 = Part('Connector_Generic', 'Conn_02x03_Odd_Even', value='Conn_02x03_Odd_Even', footprint='Connector_IDC:IDC-Header_2x03_P2.54mm_Vertical', tag='J1', Sheetname='esp32s3mini1', Sheetfile='esp32s3mini1.kicad_sch', ki_keywords='connector', ki_fp_filters='Connector*:*_2x??_*')
    U3 = Part('RF_Module', 'ESP32-S3-MINI-1', value='ESP32-S3-MINI-1', footprint='RF_Module:ESP32-S2-MINI-1', tag='U3', Sheetname='esp32s3mini1', Sheetfile='esp32s3mini1.kicad_sch', ki_keywords='RF Radio BT ESP ESP32-S3 Espressif', ki_fp_filters='ESP32?S*MINI?1')

    # Local nets
    esp32s3mini1_EN = Net('esp32s3mini1/EN')
    esp32s3mini1_IO0 = Net('esp32s3mini1/IO0')
    esp32s3mini1_RX = Net('esp32s3mini1/RX')
    esp32s3mini1_TX = Net('esp32s3mini1/TX')

    # Connections
    _p_3V3 += C1['1'], J1['2'], U3['3']
    _3v3_monitor += U3['6']
    _5v_monitor += U3['7']
    D_p += U3['24']
    D_n += U3['23']
    esp32s3mini1_EN += J1['1'], U3['45']
    esp32s3mini1_HW_VER += U3['5']
    esp32s3mini1_IO0 += J1['6'], U3['4']
    esp32s3mini1_RX += J1['5'], U3['40']
    esp32s3mini1_TX += J1['3'], U3['39']
    GND += C1['2'], J1['4'], U3['1'], U3['2'], U3['42'], U3['43'], U3['46'], U3['47'], U3['48'], U3['49'], U3['50'], U3['51'], U3['52'], U3['53'], U3['54'], U3['55'], U3['56'], U3['57'], U3['58'], U3['59'], U3['60'], U3['61'], U3['62'], U3['63'], U3['64'], U3['65']

/* End of file: esp32s3mini1.py */

/* Begin of file: main.net */
(export (version D)
  (design
    (source "/Users/shanemattner/Desktop/skidl/example_kicad_project_SKIDL/main.py")
    (date "01/25/2025 07:12 PM")
    (tool "SKiDL (2.0.1)"))
  (components
    (comp (ref "C1")
      (value "100nF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (libsource (lib Device) (part "C"))
      (sheetpath (names "/top/resistor_divider10/C10") (tstamps "/top/resistor_divider10/C10")))
    (comp (ref "C2")
      (value "10uF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (libsource (lib Device) (part "C"))
      (sheetpath (names "/top/esp32s3mini10/C1") (tstamps "/top/esp32s3mini10/C1")))
    (comp (ref "C3")
      (value "10uF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (libsource (lib Device) (part "C"))
      (sheetpath (names "/top/_3v3_regulator0/C2") (tstamps "/top/_3v3_regulator0/C2")))
    (comp (ref "C4")
      (value "10uF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (libsource (lib Device) (part "C"))
      (sheetpath (names "/top/_3v3_regulator0/C3") (tstamps "/top/_3v3_regulator0/C3")))
    (comp (ref "C5")
      (value "100nF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (libsource (lib Device) (part "C"))
      (sheetpath (names "/top/_3v3_regulator0/C5") (tstamps "/top/_3v3_regulator0/C5")))
    (comp (ref "C6")
      (value "100nF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (libsource (lib Device) (part "C"))
      (sheetpath (names "/top/_3v3_regulator0/C9") (tstamps "/top/_3v3_regulator0/C9")))
    (comp (ref "C7")
      (value "10uF")
      (footprint "Capacitor_SMD:C_0603_1608Metric")
      (libsource (lib Device) (part "C"))
      (sheetpath (names "/top/USB0/C4") (tstamps "/top/USB0/C4")))
    (comp (ref "J1")
      (value "Conn_02x03_Odd_Even")
      (footprint "Connector_IDC:IDC-Header_2x03_P2.54mm_Vertical")
      (libsource (lib Connector_Generic) (part "Conn_02x03_Odd_Even"))
      (sheetpath (names "/top/esp32s3mini10/J1") (tstamps "/top/esp32s3mini10/J1")))
    (comp (ref "P1")
      (value "USB_C_Plug_USB2.0")
      (footprint "Connector_USB:USB_C_Receptacle_GCT_USB4105-xx-A_16P_TopMnt_Horizontal")
      (libsource (lib Connector) (part "USB_C_Plug_USB2.0"))
      (sheetpath (names "/top/USB0/P1") (tstamps "/top/USB0/P1")))
    (comp (ref "R1")
      (value "1k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (libsource (lib Device) (part "R"))
      (sheetpath (names "/top/resistor_divider10/R10") (tstamps "/top/resistor_divider10/R10")))
    (comp (ref "R2")
      (value "2k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (libsource (lib Device) (part "R"))
      (sheetpath (names "/top/resistor_divider10/R9") (tstamps "/top/resistor_divider10/R9")))
    (comp (ref "R3")
      (value "2k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (libsource (lib Device) (part "R"))
      (sheetpath (names "/top/_3v3_regulator0/R2") (tstamps "/top/_3v3_regulator0/R2")))
    (comp (ref "R4")
      (value "1k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (libsource (lib Device) (part "R"))
      (sheetpath (names "/top/_3v3_regulator0/R3") (tstamps "/top/_3v3_regulator0/R3")))
    (comp (ref "R5")
      (value "1k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (libsource (lib Device) (part "R"))
      (sheetpath (names "/top/_3v3_regulator0/R7") (tstamps "/top/_3v3_regulator0/R7")))
    (comp (ref "R6")
      (value "2k")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (libsource (lib Device) (part "R"))
      (sheetpath (names "/top/_3v3_regulator0/R8") (tstamps "/top/_3v3_regulator0/R8")))
    (comp (ref "R7")
      (value "5.1K")
      (footprint "Resistor_SMD:R_0603_1608Metric")
      (libsource (lib Device) (part "R"))
      (sheetpath (names "/top/USB0/R1") (tstamps "/top/USB0/R1")))
    (comp (ref "U1")
      (value "ESP32-S3-MINI-1")
      (footprint "RF_Module:ESP32-S2-MINI-1")
      (libsource (lib RF_Module) (part "ESP32-S3-MINI-1"))
      (sheetpath (names "/top/esp32s3mini10/U3") (tstamps "/top/esp32s3mini10/U3")))
    (comp (ref "U2")
      (value "NCP1117-3.3_SOT223")
      (footprint "Package_TO_SOT_SMD:SOT-223-3_TabPin2")
      (libsource (lib Regulator_Linear) (part "NCP1117-3.3_SOT223"))
      (sheetpath (names "/top/_3v3_regulator0/U1") (tstamps "/top/_3v3_regulator0/U1"))))
  (nets
    (net (code 1) (name "+3V3")
      (node (ref "C2") (pin "1"))
      (node (ref "C3") (pin "1"))
      (node (ref "J1") (pin "2"))
      (node (ref "R2") (pin "1"))
      (node (ref "R6") (pin "1"))
      (node (ref "U1") (pin "3"))
      (node (ref "U2") (pin "2")))
    (net (code 2) (name "+5V")
      (node (ref "C4") (pin "1"))
      (node (ref "C7") (pin "1"))
      (node (ref "P1") (pin "A4"))
      (node (ref "P1") (pin "A9"))
      (node (ref "P1") (pin "B4"))
      (node (ref "P1") (pin "B9"))
      (node (ref "R3") (pin "1"))
      (node (ref "U2") (pin "3")))
    (net (code 3) (name "3v3_monitor")
      (node (ref "C5") (pin "1"))
      (node (ref "R4") (pin "1"))
      (node (ref "R6") (pin "2"))
      (node (ref "U1") (pin "6")))
    (net (code 4) (name "5v_monitor")
      (node (ref "C6") (pin "1"))
      (node (ref "R3") (pin "2"))
      (node (ref "R5") (pin "1"))
      (node (ref "U1") (pin "7")))
    (net (code 5) (name "D+")
      (node (ref "P1") (pin "A6"))
      (node (ref "U1") (pin "24")))
    (net (code 6) (name "D-")
      (node (ref "P1") (pin "A7"))
      (node (ref "U1") (pin "23")))
    (net (code 7) (name "GND")
      (node (ref "C1") (pin "2"))
      (node (ref "C2") (pin "2"))
      (node (ref "C3") (pin "2"))
      (node (ref "C4") (pin "2"))
      (node (ref "C5") (pin "2"))
      (node (ref "C6") (pin "2"))
      (node (ref "C7") (pin "2"))
      (node (ref "J1") (pin "4"))
      (node (ref "P1") (pin "A1"))
      (node (ref "P1") (pin "A12"))
      (node (ref "P1") (pin "B1"))
      (node (ref "P1") (pin "B12"))
      (node (ref "P1") (pin "S1"))
      (node (ref "R1") (pin "2"))
      (node (ref "R4") (pin "2"))
      (node (ref "R5") (pin "2"))
      (node (ref "R7") (pin "2"))
      (node (ref "U1") (pin "1"))
      (node (ref "U1") (pin "2"))
      (node (ref "U1") (pin "42"))
      (node (ref "U1") (pin "43"))
      (node (ref "U1") (pin "46"))
      (node (ref "U1") (pin "47"))
      (node (ref "U1") (pin "48"))
      (node (ref "U1") (pin "49"))
      (node (ref "U1") (pin "50"))
      (node (ref "U1") (pin "51"))
      (node (ref "U1") (pin "52"))
      (node (ref "U1") (pin "53"))
      (node (ref "U1") (pin "54"))
      (node (ref "U1") (pin "55"))
      (node (ref "U1") (pin "56"))
      (node (ref "U1") (pin "57"))
      (node (ref "U1") (pin "58"))
      (node (ref "U1") (pin "59"))
      (node (ref "U1") (pin "60"))
      (node (ref "U1") (pin "61"))
      (node (ref "U1") (pin "62"))
      (node (ref "U1") (pin "63"))
      (node (ref "U1") (pin "64"))
      (node (ref "U1") (pin "65"))
      (node (ref "U2") (pin "1")))
    (net (code 8) (name "Net-(P1-CC)")
      (node (ref "P1") (pin "A5"))
      (node (ref "R7") (pin "1")))
    (net (code 9) (name "esp32s3mini1/EN")
      (node (ref "J1") (pin "1"))
      (node (ref "U1") (pin "45")))
    (net (code 10) (name "esp32s3mini1/HW_VER")
      (node (ref "C1") (pin "1"))
      (node (ref "R1") (pin "1"))
      (node (ref "R2") (pin "2"))
      (node (ref "U1") (pin "5")))
    (net (code 11) (name "esp32s3mini1/IO0")
      (node (ref "J1") (pin "6"))
      (node (ref "U1") (pin "4")))
    (net (code 12) (name "esp32s3mini1/RX")
      (node (ref "J1") (pin "5"))
      (node (ref "U1") (pin "40")))
    (net (code 13) (name "esp32s3mini1/TX")
      (node (ref "J1") (pin "3"))
      (node (ref "U1") (pin "39"))))
)

/* End of file: main.net */

/* Begin of file: report.txt */
Info: Reading netlist file '/Users/shanemattner/Desktop/skidl/main.net'.

Info: Using reference designators to match symbols and footprints.

Info: Processing symbol 'R1:Resistor_SMD:R_0603_1608Metric'.
Info: Processing symbol 'C7:Capacitor_SMD:C_0603_1608Metric'.
Info: Processing symbol 'C6:Capacitor_SMD:C_0603_1608Metric'.
Info: Processing symbol 'C5:Capacitor_SMD:C_0603_1608Metric'.
Info: Processing symbol 'C4:Capacitor_SMD:C_0603_1608Metric'.
Info: Processing symbol 'C3:Capacitor_SMD:C_0603_1608Metric'.
Info: Processing symbol 'C2:Capacitor_SMD:C_0603_1608Metric'.
Info: Processing symbol 'C1:Capacitor_SMD:C_0603_1608Metric'.
Info: Processing symbol 'R2:Resistor_SMD:R_0603_1608Metric'.
Info: Processing symbol 'J1:Connector_IDC:IDC-Header_2x03_P2.54mm_Vertical'.
Info: Processing symbol 'P1:Connector_USB:USB_C_Receptacle_GCT_USB4105-xx-A_16P_TopMnt_Horizontal'.
Info: Processing symbol 'U2:Package_TO_SOT_SMD:SOT-223-3_TabPin2'.
Info: Processing symbol 'U1:RF_Module:ESP32-S2-MINI-1'.
Info: Processing symbol 'R7:Resistor_SMD:R_0603_1608Metric'.
Info: Processing symbol 'R6:Resistor_SMD:R_0603_1608Metric'.
Info: Processing symbol 'R3:Resistor_SMD:R_0603_1608Metric'.
Info: Processing symbol 'R5:Resistor_SMD:R_0603_1608Metric'.
Info: Processing symbol 'R4:Resistor_SMD:R_0603_1608Metric'.
Update R3 sheetname to ''.
Update R3 sheetfile to ''.
Update R3 footprint filters to ''.
Add net 5v_monitor.
Reconnect R3 pin 2 from GND to 5v_monitor.
Reconnect R3 pin 1 from /3v3_monitor to +5V.
Update R3 symbol association from /7a16d2b9-1ea1-4c05-9c09-25544e050e50/8125a0e2-acf2-4409-b5b5-5b275a41b426 to /4766119c-397d-4c69-bc60-64222fb3888f/cfbe5186-fd01-4891-b8ec-01751f6d863d/7e414daa-1f10-4555-ba16-0c6e1cc0a16a.
Add R4 (footprint 'Resistor_SMD:R_0603_1608Metric').
Change R3 value from 1k to 2k.
Add R5 (footprint 'Resistor_SMD:R_0603_1608Metric').
Reconnect R2 pin 2 from /5v_monitor to esp32s3mini1/HW_VER.
Add R6 (footprint 'Resistor_SMD:R_0603_1608Metric').
Reconnect R2 pin 1 from +5V to +3V3.
Change R7 value from 1k to 5.1K.
Update R7 symbol association from /7a16d2b9-1ea1-4c05-9c09-25544e050e50/eb97c733-2a6c-4a37-a54c-406a8d81cd4a to /440f5dc0-5f5a-4174-99c9-d67f10aa997e/64a4c45e-2684-418b-bdd5-9b733dfda08e/ae9f34d6-19e8-4af1-8e71-97665bb43d51.
Update R7 sheetname to ''.
Update R7 sheetfile to ''.
Update R7 footprint filters to ''.
Reconnect R7 pin 1 from /5v_monitor to Net-(P1-CC).
Update R2 footprint filters to ''.
Change U1 footprint from 'Package_TO_SOT_SMD:SOT-223-3_TabPin2' to 'RF_Module:ESP32-S2-MINI-1'.
Update R2 sheetfile to ''.
Add U2 (footprint 'Package_TO_SOT_SMD:SOT-223-3_TabPin2').
Update R2 sheetname to ''.
Update P1 symbol association from /86dcdd56-4325-4acf-86b9-d97ccccee45f/b617cbe2-0c97-4c03-a46f-67392b0ae28d to /ae71d318-cadb-4bd9-b097-d6646b4fc840/d3fb6659-3b6c-4f14-bad4-640b82e20e3c/aa6ba640-cd4c-4653-8284-cd002d5e1411.
Update P1 sheetname to ''.
Update P1 sheetfile to ''.
Update P1 footprint filters to ''.
Remove unused footprint C10.
Add net D-.
Reconnect P1 pin A7 from /D- to D-.
Remove unused footprint R8.
Add net D+.
Reconnect P1 pin A6 from /D+ to D+.
Remove unused footprint R9.
Disconnect P1 pin B5.
Remove unused footprint C9.
Update R2 symbol association from /7a16d2b9-1ea1-4c05-9c09-25544e050e50/52a779c0-19e5-4cf5-9ec4-dbd3555ca4b8 to /aacb19cb-04d8-4c1e-a5ae-2de8caf43489/7e2e7348-1c5a-4754-9893-7e1d57865100/ae290a65-5e12-49c5-8b6b-75c4829f8a7d.
Update J1 symbol association from /e6f5f316-cb92-4d26-9a5c-0bb6c841d4b0/59927a6c-8af2-4d54-b822-7be7f0847ac0 to /efd07c2a-5d68-4134-943c-1e5d64fbdfc3/0b994857-7116-4be5-88f6-d8d57bffbfe1/a497c2c5-2b75-4bf6-9ec4-d2960e353e29.
Update J1 sheetname to ''.
Update J1 sheetfile to ''.
Update J1 footprint filters to ''.
Add net esp32s3mini1/TX.
Reconnect J1 pin 3 from /esp32s3mini1/TX to esp32s3mini1/TX.
Add net esp32s3mini1/IO0.
Reconnect J1 pin 6 from /esp32s3mini1/IO0 to esp32s3mini1/IO0.
Add net esp32s3mini1/EN.
Reconnect J1 pin 1 from /esp32s3mini1/EN to esp32s3mini1/EN.
Add net esp32s3mini1/RX.
Reconnect J1 pin 5 from /esp32s3mini1/RX to esp32s3mini1/RX.
Reconnect R1 pin 1 from Net-(P1-CC) to esp32s3mini1/HW_VER.
Change C1 value from 10uF to 100nF.
Update C1 symbol association from /e6f5f316-cb92-4d26-9a5c-0bb6c841d4b0/5cd58687-4cea-41b8-899a-8cbda5bc386c to /34025ea9-ce6d-46b3-96e0-3ceda9a61441/76e7a493-f8c4-4730-a80f-9b1b3b20495a/fee56fdd-e586-468d-8978-23f2f42849b0.
Update C1 sheetname to ''.
Update C1 sheetfile to ''.
Update C1 footprint filters to ''.
Reconnect C1 pin 1 from +3V3 to esp32s3mini1/HW_VER.
Add net esp32s3mini1/HW_VER.
Update C2 symbol association from /7a16d2b9-1ea1-4c05-9c09-25544e050e50/5157ccba-dd1d-4514-a3b3-6dca7bbd2414 to /a50ed9da-4019-488f-83f1-b80c3aa9440b/cfcb5354-e51d-4e33-a6b5-7e982d0d4ec5/9345ba03-fb7d-41a1-85b1-73ffde34ef44.
Update C2 sheetname to ''.
Update C2 sheetfile to ''.
Update C2 footprint filters to ''.
Update R1 footprint filters to ''.
Update C3 symbol association from /7a16d2b9-1ea1-4c05-9c09-25544e050e50/61540b06-5dda-457c-bfc9-986f90574a30 to /a712fd4f-828c-40c2-b50b-015b0bab425a/d6850385-b47e-4cf5-b97a-ff15906e0286/b8a474c6-fc57-4ec4-8e4d-037d8788307f.
Update C3 sheetname to ''.
Update C3 sheetfile to ''.
Update C3 footprint filters to ''.
Reconnect C3 pin 1 from +5V to +3V3.
Update R1 sheetfile to ''.
Update C4 symbol association from /86dcdd56-4325-4acf-86b9-d97ccccee45f/222e9b17-e836-42c8-a5b8-a3b8d2801b42 to /db352309-19a8-4847-8936-e46df9f9a766/7cd8603d-8471-495f-80f1-367e3ebcd515/a79f74a3-83ed-46d3-b083-a25a86d366aa.
Update C4 sheetname to ''.
Update C4 sheetfile to ''.
Update C4 footprint filters to ''.
Update R1 sheetname to ''.
Update C5 symbol association from /7a16d2b9-1ea1-4c05-9c09-25544e050e50/9c43689d-6b61-49d9-a568-462fcea6fe04 to /369c0488-2b3a-4b82-aeab-58c1b11f1268/add6dec6-af80-4de1-ae8c-583dc0444c84/b443ef30-015b-4829-a3b2-c0fe794dafcc.
Update C5 sheetname to ''.
Update C5 sheetfile to ''.
Update C5 footprint filters to ''.
Add net 3v3_monitor.
Reconnect C5 pin 1 from /3v3_monitor to 3v3_monitor.
Update R1 symbol association from /86dcdd56-4325-4acf-86b9-d97ccccee45f/ba1a1b70-2541-4e1d-8a6a-ef20afab2c66 to /c1719575-0468-4ca4-8260-4922765df6ea/6c506675-5b60-4e74-8aa7-c2b13310a748/45461093-24ed-4dd8-98db-83edb005df4b.
Add C6 (footprint 'Capacitor_SMD:C_0603_1608Metric').
Change R1 value from 5.1K to 1k.
Add C7 (footprint 'Capacitor_SMD:C_0603_1608Metric').
Remove unused footprint U3.
Remove unused footprint R10.
Warning: No net found for component P1 pad B8 (no pin B8 in symbol).
Warning: No net found for component P1 pad B6 (no pin B6 in symbol).
Warning: No net found for component P1 pad B7 (no pin B7 in symbol).
Warning: No net found for component P1 pad A8 (no pin A8 in symbol).


Info: Total warnings: 4, errors: 0.

/* End of file: report.txt */

/* Begin of file: resistor_divider.py */
# -*- coding: utf-8 -*-

from skidl import *


def _Users_shanemattner_Desktop_skidl_kicad_schematic_parser_example_kicad_project_resistor_divider_kicad_sch():

    #===============================================================================
    # Component templates.
    #===============================================================================

    Device_C_Capacitor_SMD_C_0603_1608Metric = Part('Device', 'C', dest=TEMPLATE, footprint='Capacitor_SMD:C_0603_1608Metric')
    setattr(Device_C_Capacitor_SMD_C_0603_1608Metric, 'Footprint', 'Capacitor_SMD:C_0603_1608Metric')
    setattr(Device_C_Capacitor_SMD_C_0603_1608Metric, 'Datasheet', '')
    setattr(Device_C_Capacitor_SMD_C_0603_1608Metric, 'Description', 'Unpolarized capacitor')

    Device_R_Resistor_SMD_R_0603_1608Metric = Part('Device', 'R', dest=TEMPLATE, footprint='Resistor_SMD:R_0603_1608Metric')
    setattr(Device_R_Resistor_SMD_R_0603_1608Metric, 'Footprint', 'Resistor_SMD:R_0603_1608Metric')
    setattr(Device_R_Resistor_SMD_R_0603_1608Metric, 'Datasheet', '')
    setattr(Device_R_Resistor_SMD_R_0603_1608Metric, 'Description', 'Resistor')


    #===============================================================================
    # Component instantiations.
    #===============================================================================

    C10 = Device_C_Capacitor_SMD_C_0603_1608Metric(ref='C10', value='100nF')

    R10 = Device_R_Resistor_SMD_R_0603_1608Metric(ref='R10', value='1k')

    R9 = Device_R_Resistor_SMD_R_0603_1608Metric(ref='R9', value='2k')


    #===============================================================================
    # Net interconnections between instantiated components.
    #===============================================================================

    Net('/VIN').connect(R9['1'])

    Net('/VOUT').connect(C10['1'], R10['1'], R9['2'])

    Net('GND').connect(C10['2'], R10['2'])


#===============================================================================
# Instantiate the circuit and generate the netlist.
#===============================================================================

if __name__ == "__main__":
    _Users_shanemattner_Desktop_skidl_kicad_schematic_parser_example_kicad_project_resistor_divider_kicad_sch()
    generate_netlist()

/* End of file: resistor_divider.py */

/* Begin of file: netlist_to_skidl.py */
# -*- coding: utf-8 -*-

"""
Convert a KiCad netlist into equivalent hierarchical SKiDL programs.
"""

import re
import os
from pathlib import Path
from collections import defaultdict
from dataclasses import dataclass
from typing import Dict, List, Set
from kinparse import parse_netlist

@dataclass
class Sheet:
    number: str
    name: str
    path: str
    components: List
    local_nets: Set[str]
    imported_nets: Set[str]
    parent: str = None
    children: List[str] = None

    def __post_init__(self):
        if self.children is None:
            self.children = []

class HierarchicalConverter:
    def __init__(self, netlist_src):
        self.netlist = parse_netlist(netlist_src)
        self.sheets = {}
        self.tab = " " * 4

    def extract_sheet_info(self):
        """Build sheet hierarchy from netlist."""
        print("\n=== Extracting Sheet Info ===")
        # First pass: Create all sheets
        for sheet in self.netlist.sheets:
            path = sheet.name.strip('/')
            name = path.split('/')[-1] if path else 'main'
            parent = '/'.join(path.split('/')[:-1]) if '/' in path else None
            
            self.sheets[path] = Sheet(
                number=sheet.number,
                name=name,
                path=path,
                components=[],
                local_nets=set(),
                imported_nets=set(),
                parent=parent,
                children=[]
            )
        
        # Second pass: Build parent-child relationships
        for sheet in self.sheets.values():
            if sheet.parent:
                parent_sheet = self.sheets.get(sheet.parent)
                if parent_sheet:
                    parent_sheet.children.append(sheet.path)

    def get_sheet_path(self, comp):
        """Get sheet path from component properties."""
        if isinstance(comp.properties, dict):
            return comp.properties.get('Sheetname', '')
        sheet_prop = next((p for p in comp.properties if p.name == 'Sheetname'), None)
        return sheet_prop.value if sheet_prop else ''

    def assign_components_to_sheets(self):
        """Assign components to their respective sheets."""
        print("\n=== Assigning Components to Sheets ===")
        for comp in self.netlist.parts:
            sheet_name = self.get_sheet_path(comp)
            if sheet_name:
                for sheet in self.sheets.values():
                    if sheet.name == sheet_name:
                        sheet.components.append(comp)
                        break

    def analyze_nets(self):
        """Analyze nets to determine which are local vs imported for each sheet."""
        print("\n=== Analyzing Nets ===")
        # First pass: Group pins by sheet
        net_sheet_map = defaultdict(lambda: defaultdict(list))
        for net in self.netlist.nets:
            for pin in net.pins:
                for comp in self.netlist.parts:
                    if comp.ref == pin.ref:
                        sheet_name = self.get_sheet_path(comp)
                        if sheet_name:
                            net_sheet_map[net.name][sheet_name].append(pin)
                            break

        # Second pass: Determine net locality
        for net_name, sheet_pins in net_sheet_map.items():
            # Store original net names in the sets
            sheets_using_net = set(sheet_pins.keys())
            
            for sheet in self.sheets.values():
                if sheet.name in sheets_using_net:
                    if len(sheets_using_net) > 1:
                        sheet.imported_nets.add(net_name)  # Store original name
                    else:
                        sheet.local_nets.add(net_name)  # Store original name

                    # If sheet has children, add net to imported_nets of children
                    for child_path in sheet.children:
                        child_sheet = self.sheets[child_path]
                        if child_sheet.name in sheets_using_net:
                            child_sheet.imported_nets.add(net_name)

    def legalize_name(self, name: str, is_filename: bool = False) -> str:
        """Convert any name into a valid Python identifier.
        Handles leading and trailing +/- with _p and _n suffixes/prefixes."""
        # Remove leading slashes and spaces
        name = name.lstrip('/ ')

        # Handle trailing + or - first
        if name.endswith('+'):
            name = name[:-1] + '_p'
        elif name.endswith('-'):
            name = name[:-1] + '_n'
            
        # Handle leading + or -
        if name.startswith('+'):
            name = '_p_' + name[1:]
        elif name.startswith('-'):
            name = '_n_' + name[1:]
            
        # Convert remaining non-alphanumeric chars to underscores
        legalized = re.sub(r'[^a-zA-Z0-9_]', '_', name)
        
        # Ensure it starts with a letter or underscore
        if legalized[0].isdigit():
            legalized = '_' + legalized
            
        return legalized

    def get_net_name(self, name: str) -> str:
        """Get the original net name, preserving case and special characters."""
        # Just remove leading slashes and spaces
        return name.lstrip('/ ')

    def component_to_skidl(self, comp: object) -> str:
        """Convert component to SKiDL instantiation with all properties."""
        ref = comp.ref  # Keep original reference
        props = []
        
        # Basic properties
        props.append(f"'{comp.lib}'")  # Library
        props.append(f"'{comp.name}'")  # Part name
        
        # Add value if present
        if comp.value:
            props.append(f"value='{comp.value}'")
            
        # Add footprint if present
        if comp.footprint:
            props.append(f"footprint='{comp.footprint}'")
            
        # Add description if present
        desc = next((p.value for p in comp.properties if p.name == 'Description'), None)
        if desc:
            props.append(f"description='{desc}'")
            
        # Add tag for reference
        props.append(f"tag='{ref}'")  # Preserve reference designator
            
        # Add all additional properties from netlist
        if hasattr(comp, 'properties'):
            for prop in comp.properties:
                if prop.name not in ['Reference', 'Value', 'Footprint', 'Datasheet', 'Description']:
                    # Always quote values for certain properties
                    if prop.name in ['Sheetname', 'Sheetfile'] or prop.name.startswith('ki_'):
                        value = f"'{prop.value}'"
                    else:
                        # Quote property values that contain spaces
                        value = f"'{prop.value}'" if ' ' in prop.value else prop.value
                    props.append(f"{prop.name}={value}")
            
        # Join all properties
        return f"{self.tab}{self.legalize_name(ref)} = Part({', '.join(props)})\n"

    def net_to_skidl(self, net: object, sheet: Sheet) -> str:
        """Convert net to SKiDL connections."""
        net_name = self.legalize_name(net.name)
        if net_name.startswith('unconnected'):
            return ""
            
        pins = []
        for pin in net.pins:
            if any(comp.ref == pin.ref for comp in sheet.components):
                comp = self.legalize_name(pin.ref)
                pins.append(f"{comp}['{pin.num}']")
                
        if pins:
            return f"{self.tab}{net_name} += {', '.join(pins)}\n"
        return ""

    def generate_sheet_code(self, sheet: Sheet) -> str:
        """Generate SKiDL code for a sheet."""
        code = [
            "# -*- coding: utf-8 -*-\n",
            "from skidl import *\n"
        ]
        
        # Import parent if exists
        if sheet.parent:
            parent_name = self.sheets[sheet.parent].name
            code.append(f"from {self.legalize_name(parent_name)} import {self.legalize_name(parent_name)}\n")
        
        code.append("\n@subcircuit\n")
        
        # Function parameters - legalize names for parameters
        params = []
        for net in sorted(sheet.imported_nets):
            if not net.startswith('unconnected'):
                params.append(self.legalize_name(net))
        if 'GND' not in params:
            params.append('GND')
            
        func_name = self.legalize_name(sheet.name)
        code.append(f"def {func_name}({', '.join(params)}):\n")
        
        # Components
        if sheet.components:
            code.append(f"{self.tab}# Components\n")
            for comp in sorted(sheet.components, key=lambda x: x.ref):
                code.append(self.component_to_skidl(comp))
            code.append("\n")
        
        # Local nets
        local_nets = sorted(net for net in sheet.local_nets 
                          if not net.startswith('unconnected'))
        if local_nets:
            code.append(f"{self.tab}# Local nets\n")
            for net in local_nets:
                original_name = self.get_net_name(net)
                legal_name = self.legalize_name(original_name)
                code.append(f"{self.tab}{legal_name} = Net('{original_name}')\n")
            code.append("\n")
        
        # Connections
        code.append(f"{self.tab}# Connections\n")
        for net in self.netlist.nets:
            conn = self.net_to_skidl(net, sheet)
            if conn:
                code.append(conn)
        
        return "".join(code)

    def create_main_file(self, output_dir: str):
        """Create the main.py file."""
        code = [
            "# -*- coding: utf-8 -*-\n",
            "from skidl import *\n"
        ]
        
        # Import all non-main sheet modules
        for sheet in self.sheets.values():
            if sheet.name != 'main':
                module_name = self.legalize_name(sheet.name)
                code.append(f"from {module_name} import {module_name}\n")
        
        code.extend([
            "\ndef main():\n",
            f"{self.tab}# Create nets\n",
        ])
        
        # Create all global nets
        global_nets = set()
        for sheet in self.sheets.values():
            global_nets.update(sheet.imported_nets)
        
        for net in sorted(global_nets):
            if not net.startswith('unconnected'):
                original_name = self.get_net_name(net)
                legal_name = self.legalize_name(original_name)
                code.append(f"{self.tab}{legal_name} = Net('{original_name}')\n")
        
        # Call subcircuits in hierarchical order
        code.append(f"\n{self.tab}# Create subcircuits\n")
        for sheet in self.get_hierarchical_order():
            if sheet.name != 'main':
                params = []
                for net in sorted(sheet.imported_nets):
                    if not net.startswith('unconnected'):
                        params.append(self.legalize_name(net))
                if 'GND' not in params:
                    params.append('GND')
                func_name = self.legalize_name(sheet.name)
                code.append(f"{self.tab}{func_name}({', '.join(params)})\n")
        
        code.extend([
            "\nif __name__ == \"__main__\":\n",
            f"{self.tab}main()\n",
            f"{self.tab}generate_netlist()\n"
        ])
        
        main_path = Path(output_dir) / "main.py"
        main_path.write_text("".join(code))

    def get_hierarchical_order(self):
        """Return sheets in dependency order."""
        ordered = []
        visited = set()
        
        def process_sheet(sheet, stack=None):
            if stack is None:
                stack = set()
                
            # Detect cycles
            if sheet.path in stack:
                raise ValueError(f"Cyclic dependency detected with sheet: {sheet.path}")
            
            # Skip if already fully processed
            if sheet.path in visited:
                return
                
            stack.add(sheet.path)
            
            # Process hierarchy bottom-up:
            # First process children recursively
            for child_path in sheet.children:
                child_sheet = self.sheets[child_path]
                process_sheet(child_sheet, stack)
            
            # Then add this sheet if not already added
            if sheet.path not in visited:
                ordered.append(sheet)
                visited.add(sheet.path)
                
            stack.remove(sheet.path)
        
        # Start with independent sheets (no parent)
        for sheet in self.sheets.values():
            if not sheet.parent:
                process_sheet(sheet)
                
        return ordered

    def convert(self, output_dir: str = None):
        """Convert netlist to SKiDL files."""
        self.extract_sheet_info()
        self.assign_components_to_sheets()
        self.analyze_nets()
        
        if output_dir:
            os.makedirs(output_dir, exist_ok=True)
            
            # Generate all sheet files
            for sheet in self.sheets.values():
                if sheet.name != 'main':
                    filename = self.legalize_name(sheet.name, is_filename=True) + '.py'
                    sheet_path = Path(output_dir) / filename
                    sheet_path.write_text(self.generate_sheet_code(sheet))
                    print(f"Wrote sheet file: {sheet_path}")
            
            # Create main.py last
            self.create_main_file(output_dir)
        else:
            main_sheet = next((s for s in self.sheets.values() if not s.parent), None)
            if main_sheet:
                return self.generate_sheet_code(main_sheet)
            return ""

def netlist_to_skidl(netlist_src: str, output_dir: str = None):
    """Convert a KiCad netlist to SKiDL Python files."""
    converter = HierarchicalConverter(netlist_src)
    return converter.convert(output_dir)
/* End of file: netlist_to_skidl.py */
