#!/usr/bin/env python3

#==============================================================================
# QUICK EDIT CONFIGURATION - Modify these values as needed
#==============================================================================

# Where to look for files
ROOT_DIRECTORY = "/Users/shanemattner/Desktop/skidl"

# Where to save the combined output
OUTPUT_FILE = "collected_code.txt"

# What files to collect (add or remove filenames as needed)
TARGET_FILES = [
    'PLANNING_DOC.md',
    '_3v3_regulator.py',
    'resistor_divider.py',
    'esp32s3mini1.py',
    'USB.py',
    'netlist_to_skidl.py',
    'main.net',
    'example_kicad_project.net',
    'report.txt',
]

# Message to add at the start of the output file
INTRO_MESSAGE = """
KiCad Netlist to SKiDL Converter Code Collection

This combined output contains all implementation files for the KiCad-to-SKiDL converter tool, preserving the exact 1:1 mapping between KiCad schematics and generated Python code as outlined in PLANNING_DOC.md.

File Overview:

1. PLANNING_DOC.md - Core design document specifying:
   - 1:1 schematic/code correspondence
   - Net naming conversion rules
   - Hierarchical preservation requirements
   - Component handling specifications

2. netlist_to_skidl.py - Main conversion script implementing:
   - KiCad netlist parsing (using kinparse)
   - Hierarchical sheet structure preservation
   - Python-safe net name conversion
   - Exact component replication with properties

3. Generated Circuit Modules (auto-generated by converter):
   - _3v3_regulator.py: Voltage regulation subcircuit
   - resistor_divider.py: Resistive voltage divider implementation
   - esp32s3mini1.py: ESP32-S3-MINI-1 module interface
   - USB.py: USB connector and interface circuitry
   - main.py: listed below

4. report.txt: Kicad PCB import logs trying to import main.net

Key Implementation Details:
- Strict 1:1 mapping between KiCad sheets and Python modules
- All nets explicitly passed through hierarchy
- Original component references preserved (C10, R9, etc)
- No automatic optimization - exact topology maintained
- Generated code matches KiCad structure at all levels

Note: main.py files are excluded from this collection to prevent accidental inclusion of multiple entry points. The converter generates standalone modules that can be imported into a top-level circuit design.

Here is main.py:

# -*- coding: utf-8 -*-
from skidl import *
from esp32s3mini1 import esp32s3mini1
from _3v3_regulator import _3v3_regulator
from resistor_divider1 import resistor_divider1
from USB import USB

def main():
    # Create nets
    _p_3V3 = Net('+3V3')
    _p_5V = Net('+5V')
    _3v3_monitor = Net('3v3_monitor')
    _5v_monitor = Net('5v_monitor')
    D_p = Net('D+')
    D_n = Net('D-')
    esp32s3mini1_HW_VER = Net('esp32s3mini1/HW_VER')
    GND = Net('GND')

    # Create subcircuits
    resistor_divider1(_p_3V3, esp32s3mini1_HW_VER, GND)
    esp32s3mini1(_p_3V3, _3v3_monitor, _5v_monitor, D_p, D_n, esp32s3mini1_HW_VER, GND)
    _3v3_regulator(_p_3V3, _p_5V, _3v3_monitor, _5v_monitor, GND)
    USB(_p_5V, D_p, D_n, GND)

if __name__ == "__main__":
    main()
    generate_netlist()


______

TODO:
- Help me figure out why report.txt has so many inconsistencies.  There should be no changes.


"""

#==============================================================================
# Script Implementation - No need to modify below this line
#==============================================================================

"""
File Collector for Query Building

This script combines specific files into a single output file to help build
queries when iterating on software development. Edit the CONFIGURATION section
at the top to customize which files to collect.
"""

import os
from typing import List
from dataclasses import dataclass

@dataclass
class FileCollectorConfig:
    """Configuration class to store all script parameters"""
    root_directory: str
    output_filename: str
    target_filenames: List[str]
    intro_message: str

def create_config_from_settings() -> FileCollectorConfig:
    """Creates configuration object from the settings defined at the top of the script"""
    return FileCollectorConfig(
        root_directory=ROOT_DIRECTORY,
        output_filename=OUTPUT_FILE,
        target_filenames=TARGET_FILES,
        intro_message=INTRO_MESSAGE
    )

def is_target_file(filename: str, target_files: List[str]) -> bool:
    """
    Check if a filename matches one of our target filenames.
    
    Args:
        filename: Name of the file to check
        target_files: List of target filenames to match against
    """
    return os.path.basename(filename) in target_files

def find_target_files(config: FileCollectorConfig) -> List[str]:
    """
    Search for target files in the root directory.
    
    Args:
        config: Configuration object containing search parameters
    
    Returns:
        List[str]: List of full file paths for matching files
    """
    collected_files = []
    
    # Walk through the directory tree
    for dirpath, _, filenames in os.walk(config.root_directory):
        for filename in filenames:
            if is_target_file(filename, config.target_filenames):
                full_path = os.path.join(dirpath, filename)
                if os.path.isfile(full_path):
                    collected_files.append(full_path)
    
    return sorted(collected_files)

def write_combined_file(collected_files: List[str], config: FileCollectorConfig) -> None:
    """
    Write all collected file contents to a single output file.
    
    Args:
        collected_files: List of file paths to combine
        config: Configuration object containing output settings
    """
    with open(config.output_filename, 'w') as out_file:
        # Write the introduction message
        out_file.write(config.intro_message + "\n")
        
        # Process each collected file
        total_lines = 0
        for file_path in collected_files:
            try:
                # Read and write each file's contents with clear separation
                with open(file_path, 'r') as input_file:
                    content = input_file.read()
                    filename = os.path.basename(file_path)
                    
                    # Add clear separators around file content
                    out_file.write(f"\n/* Begin of file: {filename} */\n")
                    out_file.write(content)
                    out_file.write(f"\n/* End of file: {filename} */\n")
                    
                    # Print statistics for monitoring
                    num_lines = len(content.splitlines())
                    total_lines += num_lines
                    print(f"{filename}: {num_lines} lines")
                    
            except Exception as e:
                print(f"Error processing {file_path}: {e}")
        print(f"Total lines written: {total_lines}")

def main():
    """Main execution function"""
    # Create configuration from settings
    config = create_config_from_settings()
    
    # Find all matching files
    collected_files = find_target_files(config)
    
    # Combine files into output
    write_combined_file(collected_files, config)
    
    # Print summary
    print(f"\nProcessed {len(collected_files)} files")
    print(f"Output saved to: {config.output_filename}")

if __name__ == "__main__":
    main()
