#!/usr/bin/env python3

import os
import uuid

KICAD8_SYMBOL_DIR = os.environ.get('KICAD8_SYMBOL_DIR', '/usr/share/kicad/symbols')

def find_symbol_library(lib_name):
    """Find the .kicad_sym file containing the specified library"""
    lib_file = f"{lib_name}.kicad_sym"
    lib_path = os.path.join(KICAD8_SYMBOL_DIR, lib_file)
    return lib_path if os.path.exists(lib_path) else None

def extract_symbol_definition(lib_path, symbol_name):
    """Extract a specific symbol definition from a .kicad_sym file using parenthesis matching"""
    with open(lib_path, 'r') as f:
        lines = f.readlines()
    
    start_line = None
    symbol_lines = []
    
    # Find the start of the symbol definition
    for i, line in enumerate(lines):
        if f'(symbol "{symbol_name}"' in line:
            start_line = i
            break
            
    if start_line is None:
        return None
        
    # Count parentheses to find the matching end
    paren_count = 0
    for line in lines[start_line:]:
        symbol_lines.append(line.rstrip())
        paren_count += line.count('(') - line.count(')')
        if paren_count == 0:
            break
            
    return '\n'.join(symbol_lines)

def get_library_symbol(lib_name, symbol_name):
    """Main function to get a symbol definition from KiCad libraries"""
    lib_path = find_symbol_library(lib_name)
    if not lib_path:
        raise FileNotFoundError(f"Could not find library {lib_name} in {KICAD8_SYMBOL_DIR}")
    
    symbol_def = extract_symbol_definition(lib_path, symbol_name)
    if not symbol_def:
        raise ValueError(f"Symbol {symbol_name} not found in library {lib_name}")
    
    return symbol_def

def generate_uuid():
    """Generate a KiCad-compatible UUID"""
    return str(uuid.uuid4())

def calculate_symbol_position(index, grid_size=20.0, symbols_per_row=5):
    """
    Calculate grid-based position for symbol placement
    
    Args:
        index: Component index (0-based)
        grid_size: Grid spacing in mm (default: 20.0)
        symbols_per_row: Number of symbols per row (default: 5)
    
    Returns:
        tuple: (x, y) position in mm
    """
    row = index // symbols_per_row
    col = index % symbols_per_row
    x = float(col * grid_size)
    y = float(row * -grid_size)  # Negative for KiCad coordinate system
    return (x, y)

def create_blank_schematic(schematic_path):
    """Create a blank KiCad schematic file"""
    content = '''(kicad_sch (version 20211014) (generator kiutils)
  (paper "A4")

  (title_block
    (title "SKiDL-Generated Schematic")
    (rev "1.0")
    (company "Generated by SKiDL")
  )
  (lib_symbols)

  (sheet_instances
    (path "/" (page "1"))
  )
)'''
    with open(schematic_path, 'w') as f:
        f.write(content)

def add_symbol_to_schematic(schematic_path, lib_name, symbol_name, reference, value, position=None):
    """
    Add a symbol to an existing KiCad schematic
    
    Args:
        schematic_path: Path to .kicad_sch file
        lib_name: Library name (e.g. "Device")
        symbol_name: Symbol name (e.g. "R")
        reference: Component reference (e.g. "R1")
        value: Component value (e.g. "10k")
        position: Optional (x,y) tuple for placement. If None, will be auto-calculated.
    """
    # Create blank schematic if it doesn't exist
    if not os.path.exists(schematic_path):
        create_blank_schematic(schematic_path)
    
    # Read current schematic content
    with open(schematic_path, 'r') as f:
        lines = f.readlines()
    
    # Find lib_symbols section
    lib_symbols_idx = -1
    for i, line in enumerate(lines):
        if '(lib_symbols)' in line:
            lib_symbols_idx = i
            break
    
    if lib_symbols_idx == -1:
        raise ValueError("Could not find lib_symbols section in schematic")
    
    # Get symbol definition
    symbol_def = get_library_symbol(lib_name, symbol_name)
    
    # Check if symbol is already in lib_symbols
    symbol_exists = False
    for line in lines:
        if f'(symbol "{lib_name}:{symbol_name}"' in line:
            symbol_exists = True
            break
    
    # Add symbol definition if not already present
    if not symbol_exists:
        # Insert after (lib_symbols) line
        lines.insert(lib_symbols_idx + 1, symbol_def + '\n')
    
    # Calculate position if not provided
    if position is None:
        # Count existing symbols to calculate position
        symbol_count = sum(1 for line in lines if '(symbol (lib_id' in line)
        pos_x, pos_y = calculate_symbol_position(symbol_count)
    else:
        pos_x, pos_y = position
    
    # Generate UUIDs
    symbol_uuid = generate_uuid()
    pin1_uuid = generate_uuid()
    pin2_uuid = generate_uuid()
    
    # Create symbol instance
    symbol_instance = f'''  (symbol (lib_id "{lib_name}:{symbol_name}") (at {pos_x} {pos_y} 0)
    (unit 1)
    (in_bom yes)
    (on_board yes)
    (dnp no)
    (uuid {symbol_uuid})
    (property "Reference" "{reference}"
      (at {pos_x} {pos_y - 2.54} 0)
      (effects
        (font
          (size 1.27 1.27)
        )
      )
    )
    (property "Value" "{value}"
      (at {pos_x} {pos_y + 2.54} 0)
      (effects
        (font
          (size 1.27 1.27)
        )
      )
    )
    (pin "1"
      (uuid {pin1_uuid})
    )
    (pin "2"
      (uuid {pin2_uuid})
    )
    (instances
      (project ""
        (path "/"
          (reference "{reference}")
          (unit 1)
        )
      )
    )
  )'''
    
    # Find position to insert symbol instance (before sheet_instances)
    sheet_instances_idx = -1
    for i, line in enumerate(lines):
        if '(sheet_instances' in line:
            sheet_instances_idx = i
            break
    
    if sheet_instances_idx == -1:
        raise ValueError("Could not find sheet_instances section in schematic")
    
    # Insert symbol instance
    lines.insert(sheet_instances_idx, symbol_instance + '\n')
    
    # Write updated content back to file
    with open(schematic_path, 'w') as f:
        f.writelines(lines)

def test_add_resistor():
    """Test function to add a resistor to a schematic"""
    schematic_path = "test_schematic.kicad_sch"
    
    # Add a resistor
    add_symbol_to_schematic(
        schematic_path=schematic_path,
        lib_name="Device",
        symbol_name="R",
        reference="R1",
        value="10k"
    )

if __name__ == "__main__":
    test_add_resistor()
