# -*- coding: utf-8 -*-

# The MIT License (MIT) - Copyright (c) Dave Vandenbout.


import datetime
import os.path
import re
import shutil
import time
from collections import Counter, OrderedDict

from skidl.scriptinfo import get_script_name
from skidl.geometry import BBox, Point, Tx, Vector
from skidl.schematics.net_terminal import NetTerminal
from skidl.utilities import export_to_all
from .constants import BLK_INT_PAD, BOX_LABEL_FONT_SIZE, GRID, PIN_LABEL_FONT_SIZE
from .bboxes import calc_symbol_bbox, calc_hier_label_bbox
from skidl.schematics.place import PlacementFailure
from skidl.schematics.route import RoutingFailure
from skidl.utilities import rmv_attr


__all__ = []

"""
Functions for generating a KiCad EESCHEMA schematic.
"""


@export_to_all
def gen_schematic(
    circuit,
    filepath=".",
    top_name=get_script_name(),
    title="SKiDL-Generated Schematic",
    flatness=0.0,
    retries=2,
    **options
):
    """Create schematic files from a Circuit object.
    Args:
        circuit (Circuit): The Circuit object that will have a schematic generated for it.
        filepath (str, optional): The directory where the schematic files are placed. Defaults to ".".
        top_name (str, optional): The name for the top of the circuit hierarchy. Defaults to get_script_name().
        title (str, optional): The title of the schematic. Defaults to "SKiDL-Generated Schematic".
        flatness (float, optional): Determines how much the hierarchy is flattened. Defaults to 0.0.
        retries (int, optional): Number of times to re-try if routing fails. Defaults to 2.
        options (dict, optional): Dict of options and values, usually for drawing/debugging.
    """
    from skidl.logger import active_logger
    from kiutils.schematic import Schematic
    from kiutils.items.common import Position, TitleBlock, Property, ColorRGBA, Stroke
    from kiutils.items.schitems import SchematicSymbol, Junction, HierarchicalSheet
    import os
    import shutil
    
    # Find the root directory (where setup.py is located)
    root_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    
    # Define paths
    template_dir = os.path.join(os.path.dirname(__file__), "kicad_blank_project", "kicad_blank_project")  # Source is the inner directory
    blank_project_dir = os.path.join(filepath, "kicad_blank_project")  # Destination is a single directory
    
    # Copy the blank project template
    try:
        # Remove destination if it exists
        if os.path.exists(blank_project_dir):
            shutil.rmtree(blank_project_dir)
        os.makedirs(blank_project_dir)
        
        # Copy files from template directory to destination
        for item in os.listdir(template_dir):
            source = os.path.join(template_dir, item)
            dest = os.path.join(blank_project_dir, item)
            if os.path.isdir(source):
                shutil.copytree(source, dest)
            else:
                shutil.copy2(source, dest)
                
        active_logger.info(f"Using KiCad blank project directory: {blank_project_dir}")
    except Exception as e:
        active_logger.error(f"Failed to setup blank project: {str(e)}")
        raise
    
    # Get all subcircuits from group_name_cntr
    subcircuits = circuit.group_name_cntr.keys()

    for subcircuit_path in subcircuits:
        # Extract the last name in the hierarchy
        subcircuit_name = subcircuit_path.split('.')[-1]
        
        # Create new schematic for this subcircuit
        sch = Schematic.create_new()
        
        # Set basic properties
        sch.titleBlock = TitleBlock()
        sch.titleBlock.title = f"{subcircuit_name} - {title}"
        sch.titleBlock.company = "Generated by SKiDL"
        sch.titleBlock.revision = "1.0"
        
        # Create the schematic file path in the blank project directory
        sch_path = os.path.join(blank_project_dir, f"{subcircuit_name}.kicad_sch")

        # Add parts to schematic
        for part in circuit.parts:
            # The legalized name from Kicad netlist import to SKiDL can add a '_' to the front
            # of circuit name, which throws off this matching logic.  In the future we need to make
            # this more robust and interact with the SKiDL netlist import to get the correct name.
            # There will definately be edge casees where this logic will result in too many parts being added
            # to the schematic.
            if part.Sheetname in subcircuit_name:
                print(f'Adding part {part.ref} to schematic')
            else:
                print(f'Skipping part {part.ref} because it is in {part.Sheetname} not {subcircuit_name}')
                # # Create schematic symbol
                # symbol = SchematicSymbol()
                
                # # Set basic properties
                # symbol.id = part.ref
                # symbol.unit = 1  # Default unit
                # symbol.inBom = True
                # symbol.onBoard = True
                # symbol.position = Position()
                
                # # Calculate grid-based position (20mm spacing)
                # grid_size = 20.0
                # if not hasattr(sch, '_symbol_count'):
                #     sch._symbol_count = 0
                # row = sch._symbol_count // 5  # 5 symbols per row
                # col = sch._symbol_count % 5
                # symbol.position.X = float(col * grid_size)
                # symbol.position.Y = float(row * -grid_size)  # Negative for KiCad coordinate system
                # symbol.position.angle = 0.0
                # sch._symbol_count += 1
                
                # # Add properties
                # symbol.properties = []
                
                # # Reference property
                # ref_prop = Property()
                # ref_prop.key = "Reference"
                # ref_prop.value = part.ref
                # ref_prop.id = 0
                # ref_prop.position = Position()
                # ref_prop.position.X = symbol.position.X
                # ref_prop.position.Y = symbol.position.Y - 2.54  # Offset below symbol
                # ref_prop.position.angle = 0.0
                # symbol.properties.append(ref_prop)
                
                # # Value property
                # val_prop = Property()
                # val_prop.key = "Value"
                # val_prop.value = part.value
                # val_prop.id = 1
                # val_prop.position = Position()
                # val_prop.position.X = symbol.position.X
                # val_prop.position.Y = symbol.position.Y + 2.54  # Offset above symbol
                # val_prop.position.angle = 0.0
                # symbol.properties.append(val_prop)
                
                # # Footprint property
                # if part.footprint:
                #     fp_prop = Property()
                #     fp_prop.key = "Footprint"
                #     fp_prop.value = part.footprint
                #     fp_prop.id = 2
                #     fp_prop.position = Position()
                #     fp_prop.position.X = symbol.position.X
                #     fp_prop.position.Y = symbol.position.Y + 5.08  # Offset further above symbol
                #     fp_prop.position.angle = 0.0
                #     symbol.properties.append(fp_prop)
                
                # # Initialize symbols list if needed
                # if not hasattr(sch, 'symbols'):
                #     sch.libSymbols = []
                
                # print(f"Adding symbol {part.ref} to schematic")
                # # Add symbol to schematic
                # sch.libSymbols.append(symbol)
        
        try:
            # Save schematic file
            sch.to_file(sch_path)
            active_logger.info(f"Generated schematic for {subcircuit_name} at {sch_path}")
            print(f"Generated schematic for {subcircuit_name} at {sch_path}")
            
        except Exception as e:
            active_logger.error(f"Error saving schematic {subcircuit_name}: {str(e)}")
            raise

    # Now add sheet symbols to main schematic
    main_sch_path = os.path.join(blank_project_dir, "kicad_blank_project.kicad_sch")
    main_sch = Schematic.from_file(main_sch_path)
    
    # Grid layout settings
    sheet_width = 30  # mm
    sheet_height = 30  # mm
    spacing = 40  # mm between sheets
    sheets_per_row = 2
    
    # Calculate total dimensions needed
    num_sheets = len(subcircuits)
    num_rows = (num_sheets + sheets_per_row - 1) // sheets_per_row
    num_cols = min(sheets_per_row, num_sheets)
    
    total_width = num_cols * sheet_width + (num_cols - 1) * spacing
    total_height = num_rows * sheet_height + (num_rows - 1) * spacing
    
    # Calculate starting position to center the group
    start_x = (297 - total_width) / 2  # A4 width is 297mm
    start_y = (210 - total_height) / 2  # A4 height is 210mm
    
    # Create sheets for each subcircuit
    for i, subcircuit_path in enumerate(subcircuits):
        subcircuit_name = subcircuit_path.split('.')[-1]
        
        # Calculate grid position
        row = i // sheets_per_row
        col = i % sheets_per_row
        x = start_x + col * (sheet_width + spacing)
        y = start_y + row * (sheet_height + spacing)
        
        # Create hierarchical sheet
        sheet = HierarchicalSheet()
        sheet.position = Position()
        sheet.position.X = str(x)
        sheet.position.Y = str(y)
        sheet.position.angle = "0"
        
        # Set sheet dimensions
        sheet.width = sheet_width
        sheet.height = sheet_height
        
        # Set sheet appearance
        sheet.stroke = Stroke()
        sheet.fill = ColorRGBA()
        
        # Set sheet name property with position
        sheet.sheetName = Property(key="Sheet name")
        sheet.sheetName.value = subcircuit_name
        sheet.sheetName.position = Position()
        sheet.sheetName.position.X = str(x + sheet_width/2)  # Center horizontally
        sheet.sheetName.position.Y = str(y - 5)  # 5mm above sheet
        sheet.sheetName.position.angle = "0"
        
        # Set sheet file property with position
        sheet.fileName = Property(key="Sheet file")
        sheet.fileName.value = f"{subcircuit_name}.kicad_sch"
        sheet.fileName.position = Position()
        sheet.fileName.position.X = str(x + sheet_width/2)  # Center horizontally
        sheet.fileName.position.Y = str(y - 2)  # 2mm below sheet name
        sheet.fileName.position.angle = "0"
        
        # Add sheet to schematic
        if not hasattr(main_sch, 'sheets'):
            main_sch.sheets = []
        main_sch.sheets.append(sheet)
    
    # Save main schematic with added sheets
    try:
        main_sch.to_file(main_sch_path)
        active_logger.info(f"Added sheet symbols to main schematic at {main_sch_path}")
    except Exception as e:
        active_logger.error(f"Error saving main schematic: {str(e)}")
        raise
