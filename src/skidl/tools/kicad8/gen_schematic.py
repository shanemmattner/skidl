# -*- coding: utf-8 -*-

# The MIT License (MIT) - Copyright (c) Dave Vandenbout.


import datetime
import os.path
import re
import shutil
import time
from collections import Counter, OrderedDict

from skidl.scriptinfo import get_script_name
from skidl.geometry import BBox, Point, Tx, Vector
from skidl.schematics.net_terminal import NetTerminal
from skidl.utilities import export_to_all
from .constants import BLK_INT_PAD, BOX_LABEL_FONT_SIZE, GRID, PIN_LABEL_FONT_SIZE
from .bboxes import calc_symbol_bbox, calc_hier_label_bbox
from skidl.schematics.place import PlacementFailure
from skidl.schematics.route import RoutingFailure
from skidl.utilities import rmv_attr


__all__ = []

"""
Functions for generating a KiCad EESCHEMA schematic.
"""


@export_to_all
def gen_schematic(
    circuit,
    filepath=".",
    top_name=get_script_name(),
    title="SKiDL-Generated Schematic",
    flatness=0.0,
    retries=2,
    **options
):
    """Create schematic files from a Circuit object.
    Args:
        circuit (Circuit): The Circuit object that will have a schematic generated for it.
        filepath (str, optional): The directory where the schematic files are placed. Defaults to ".".
        top_name (str, optional): The name for the top of the circuit hierarchy. Defaults to get_script_name().
        title (str, optional): The title of the schematic. Defaults to "SKiDL-Generated Schematic".
        flatness (float, optional): Determines how much the hierarchy is flattened. Defaults to 0.0.
        retries (int, optional): Number of times to re-try if routing fails. Defaults to 2.
        options (dict, optional): Dict of options and values, usually for drawing/debugging.
    """
    from skidl.logger import active_logger
    from kiutils.schematic import Schematic
    from kiutils.items.common import Position, TitleBlock
    from kiutils.items.schitems import SchematicSymbol, Junction
    from kiutils.symbol import Symbol
    import os
    import shutil
    
    # Find the root directory (where setup.py is located)
    root_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    
    # Define paths - use the inner template directory as source
    template_base = os.path.join(os.path.dirname(__file__), "kicad_blank_project")
    template_dir = os.path.join(template_base, "kicad_blank_project")  # Source is the inner directory
    blank_project_dir = os.path.join(filepath, "kicad_blank_project")  # Destination is a single directory
    
    # Copy the blank project template
    try:
        # Remove destination if it exists
        if os.path.exists(blank_project_dir):
            shutil.rmtree(blank_project_dir)
        os.makedirs(blank_project_dir)
        
        # Copy files from template directory to destination
        for item in os.listdir(template_dir):
            source = os.path.join(template_dir, item)
            dest = os.path.join(blank_project_dir, item)
            if os.path.isdir(source):
                shutil.copytree(source, dest)
            else:
                shutil.copy2(source, dest)
                
        active_logger.info(f"Using KiCad blank project directory: {blank_project_dir}")
    except Exception as e:
        active_logger.error(f"Failed to setup blank project: {str(e)}")
        raise
    
    # Get all subcircuits from group_name_cntr
    subcircuits = circuit.group_name_cntr.keys()
    
    for subcircuit_path in subcircuits:
        # Extract the last name in the hierarchy
        subcircuit_name = subcircuit_path.split('.')[-1]
        
        # Create new schematic for this subcircuit
        sch = Schematic.create_new()
        
        # Set basic properties
        sch.titleBlock = TitleBlock()
        sch.titleBlock.title = f"{subcircuit_name} - {title}"
        sch.titleBlock.company = "Generated by SKiDL"
        sch.titleBlock.revision = "1.0"
        
        # Create the schematic file path in the blank project directory
        sch_path = os.path.join(blank_project_dir, f"{subcircuit_name}.kicad_sch")
        
        try:
            # Save schematic file
            sch.to_file(sch_path)
            active_logger.info(f"Generated schematic for {subcircuit_name} at {sch_path}")
            print(f"Generated schematic for {subcircuit_name} at {sch_path}")
            
        except Exception as e:
            active_logger.error(f"Error saving schematic {subcircuit_name}: {str(e)}")
            raise
